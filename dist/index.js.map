{"version":3,"file":"index.js","sources":["../node_modules/tslib/tslib.es6.js","../src/object-plus/tools.ts","../src/object-plus/eventsource.ts","../src/object-plus/mixins.ts","../src/object-plus/events.ts","../src/object-plus/logging.ts","../src/io-tools.ts","../src/traversable.ts","../src/validation.ts","../src/transactions.ts","../src/record/updates.ts","../src/record/metatypes/any.ts","../src/record/metatypes/basic.ts","../src/record/metatypes/date.ts","../src/record/metatypes/owned.ts","../src/record/metatypes/shared.ts","../src/record/metatypes/index.ts","../src/record/attrDef.ts","../src/record/mixin.ts","../src/record/io-mixin.ts","../src/record/record.ts","../src/record/index.ts","../src/collection/commons.ts","../src/collection/add.ts","../src/collection/remove.ts","../src/collection/set.ts","../src/collection/index.ts","../src/relations/commons.ts","../src/relations/from.ts","../src/relations/subsetOf.ts","../src/relations/store.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"," /** Similar to underscore `_.defaults` */\nexport function defaults< T >( dest : T, ...sources : Object[] ) : T\nexport function defaults< T >( dest : T, source : Object ) : T {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) && !dest.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    if( arguments.length > 2 ){\n        for( let i = 2; i < arguments.length; i++ ){\n            const other = arguments[ i ];\n            other && defaults( dest, other );\n        }\n    }\n\n    return dest;\n}\n\n/** Check if value is raw JSON */\nexport function isValidJSON( value : any ) : boolean {\n    if( value === null ){\n        return true;\n    }\n\n    switch( typeof value ){\n    case 'number' :\n    case 'string' :\n    case 'boolean' :\n        return true;\n\n    case 'object':\n        var proto = Object.getPrototypeOf( value );\n\n        if( proto === Object.prototype || proto === Array.prototype ){\n            return every( value, isValidJSON );\n        }\n    }\n\n    return false;\n}\n\n/** Get the base class constructor function.\n * @param Class Subclass constructor function.\n * @returns Base class constructor function.\n */\nexport function getBaseClass( Class : Function ) {\n    return Object.getPrototypeOf( Class.prototype ).constructor\n}\n\nexport function assignToClassProto<T, K extends keyof T>( Class, definition : T, ...names : K[] ) : void {\n    for( let name of names ){\n        const value = definition[ name ];\n        value === void 0 || ( Class.prototype[ name ] = value );\n    }\n}\n\n/** Checks whenever given object is an empty hash `{}` */\nexport function isEmpty( obj : {} ) : boolean {\n    if( obj ){\n        for( let key in obj ){\n            if( obj.hasOwnProperty( key ) ){\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport type Iteratee = ( value : any, key? : string | number ) => any;\n\n/** @hidden */\nfunction someArray( arr : any[], fun : Iteratee ) : any {\n    let result;\n\n    for( let i = 0; i < arr.length; i++ ){\n        if( result = fun( arr[ i ], i ) ){\n            return result;\n        }\n    }\n}\n\n/** @hidden */\nfunction someObject( obj : {}, fun : Iteratee ) : any {\n    let result;\n\n    for( let key in obj ){\n        if( obj.hasOwnProperty( key ) ){\n            if( result = fun( obj[ key ], key ) ){\n                return result;\n            }\n        }\n    }\n}\n\n/** Similar to underscore `_.some` */\nexport function some( obj, fun : Iteratee ) : any {\n    if( Object.getPrototypeOf( obj ) === ArrayProto ){\n        return someArray( obj, fun );\n    }\n    else{\n        return someObject( obj, fun );\n    }\n}\n\n/** Similar to underscore `_.every` */\nexport function every( obj : { }, predicate : Iteratee ) : boolean {\n    return !some( obj, x => !predicate( x ) );\n}\n\n/** Similar to `getOwnPropertyDescriptor`, but traverse the whole prototype chain. */\nexport function getPropertyDescriptor( obj : {}, prop : string ) : PropertyDescriptor {\n    let desc : PropertyDescriptor;\n\n    for( let proto = obj; !desc && proto; proto = Object.getPrototypeOf( proto ) ) {\n        desc = Object.getOwnPropertyDescriptor( proto, prop );\n    }\n\n    return desc;\n}\n\n/** Similar to underscore `_.omit` */\nexport function omit( source : {}, ...rest : string[] ) : {}\nexport function omit( source ) : {} {\n    const dest = {}, discard = {};\n\n    for( let i = 1; i < arguments.length; i ++ ){\n        discard[ arguments[ i ] ] = true;\n    }\n\n    for( var name in source ) {\n        if( !discard.hasOwnProperty( name ) && source.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    return dest;\n}\n\n/** map `source` object properties with a given function, and assign the result to the `dest` object.\n * When `fun` returns `undefined`, skip this value. \n */\nexport function transform< A, B >( dest : { [ key : string ] : A }, source : { [ key : string ] : B }, fun : ( value : B, key : string ) => A | void ) : { [ key : string ] : A } {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) ) {\n            var value = fun( source[ name ], name );\n            value === void 0 || ( dest[ name ] = < A >value );\n        }\n    }\n\n    return dest;\n}\n\n/** @hidden */\nexport function fastAssign< A >( dest : A, source : {} ) : A {\n    for( var name in source ) {\n        dest[ name ] = source[ name ];\n    }\n\n    return dest;\n}\n\n/** @hidden */\nexport function fastDefaults< A >( dest : A, source : {} ) : A {\n    for( var name in source ) {\n        if( dest[ name ] === void 0 ){\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    return dest;\n}\n\n/** Similar to underscore `_.extend` and `Object.assign` */\nexport function assign< T >( dest : T, ...sources : Object[] ) : T\nexport function assign< T >( dest : T, source : Object ) : T {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    if( arguments.length > 2 ){\n        for( let i = 2; i < arguments.length; i++ ){\n            const other = arguments[ i ];\n            other && assign( dest, other );\n        }\n    }\n\n    return dest;\n}\n\n/** Similar to underscore `_.keys` */\nexport function keys( o : any ) : string[]{\n    return o ? Object.keys( o ) : [];\n}\n\n/** Similar to underscore `_.once` */\nexport function once( func : Function ) : Function {\n    var memo, first = true;\n    return function() {\n        if ( first ) {\n            first = false;\n            memo = func.apply(this, arguments);\n            func = null;\n        }\n        return memo;\n    };\n}\n\n/** @hidden */\nconst ArrayProto = Array.prototype,\n      DateProto = Date.prototype,\n      ObjectProto = Object.prototype;\n\n/**\n * Determine whenever two values are not equal, deeply traversing \n * arrays and plain JS objects (hashes). Dates are compared by enclosed timestamps, all other\n * values are compared with strict comparison.\n */\nexport function notEqual( a : any, b : any) : boolean {\n    if( a === b ) return false;\n\n    if( a && b && typeof a == 'object' && typeof b == 'object' ) {\n        const protoA = Object.getPrototypeOf( a );\n\n        if( protoA !== Object.getPrototypeOf( b ) ) return true;\n\n        switch( protoA ){\n            case DateProto   : return +a !== +b;\n            case ArrayProto  : return arraysNotEqual( a, b );\n            case ObjectProto :\n            case null:\n                return objectsNotEqual( a, b );\n        }\n    }\n\n    return true;\n}\n\n/** @hidden */\nfunction objectsNotEqual( a, b ) {\n    const keysA = Object.keys( a );\n\n    if( keysA.length !== Object.keys( b ).length ) return true;\n\n    for( let i = 0; i < keysA.length; i++ ) {\n        const key = keysA[ i ];\n\n        if( !b.hasOwnProperty( key ) || notEqual( a[ key ], b[ key ] ) ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/** @hidden */\nfunction arraysNotEqual( a, b ) {\n    if( a.length !== b.length ) return true;\n\n    for( let i = 0; i < a.length; i++ ) {\n        if( notEqual( a[ i ], b[ i ] ) ) return true;\n    }\n\n    return false;\n}\n\n/**\n * Create an object without Object prototype members except hasOwnProperty.\n * @param obj - optional parameter to populate the hash map from.\n */\nconst HashProto = Object.create( null );\nHashProto.hasOwnProperty = ObjectProto.hasOwnProperty;\n\nexport function hashMap( obj? ){\n    const hash = Object.create( HashProto );\n    return obj ? assign( hash, obj ) : hash;\n}","import { once as _once } from './tools'\n\n/*******************\n * Prebuilt events map, used for optimized bulk event subscriptions.\n *\n * const events = new EventMap({\n *      'change' : true, // Resend this event from self as it is.\n *      'change:attr' : 'localTargetFunction',\n *      'executedInTargetContext' : function(){ ... }\n *      'executedInNativeContext' : '^props.handler'\n * })\n */\n/** @hidden */\nexport interface EventsDefinition {\n    [ events : string ] : Function | string | boolean\n}\n\n/** @hidden */\nexport class EventMap {\n    handlers : EventDescriptor[] = [];\n\n    constructor( map? : EventsDefinition | EventMap ){\n        if( map ){\n            if( map instanceof EventMap ){\n                this.handlers = map.handlers.slice();\n            }\n            else{\n                map && this.addEventsMap( map );\n            }\n        }\n    }\n\n    merge( map : EventMap ){\n        this.handlers = this.handlers.concat( map.handlers );\n    }\n\n    addEventsMap( map : EventsDefinition ){\n        for( let names in map ){\n            this.addEvent( names, map[ names ] )\n        }\n    }\n\n    bubbleEvents( names : string ){\n        for( let name of names.split( eventSplitter ) ){\n            this.addEvent( name, getBubblingHandler( name ) );\n        }\n    }\n\n    addEvent( names : string, callback : Function | string | boolean ){\n        const { handlers } = this;\n\n        for( let name of names.split( eventSplitter ) ){\n            handlers.push( new EventDescriptor( name, callback ) );\n        }\n    }\n\n    subscribe( target : {}, source : EventSource ){\n        for( let event of this.handlers ){\n            on( source, event.name, event.callback, target );\n        }\n    }\n\n    unsubscribe( target : {}, source : EventSource ){\n        for( let event of this.handlers ){\n            off( source, event.name, event.callback, target );\n        }\n    }\n}\n\n/** @hidden */\nexport class EventDescriptor {\n    callback : Function\n\n    constructor(\n        public name : string,\n        callback : Function | string | boolean\n    ){\n        if( callback === true ){\n            this.callback = getBubblingHandler( name );\n        }\n        else if( typeof callback === 'string' ){\n            this.callback =\n                function localCallback(){\n                    const handler = this[ callback ];\n                    handler && handler.apply( this, arguments );\n                };\n        }\n        else{\n            this.callback = <Function>callback;\n        }\n    }\n}\n\n/** @hidden */\nconst _bubblingHandlers = {};\n\n/** @hidden */\nfunction getBubblingHandler( event : string ){\n    return _bubblingHandlers[ event ] || (\n        _bubblingHandlers[ event ] = function( a?, b?, c?, d?, e? ){\n            if( d !== void 0 || e !== void 0 ) trigger5( this, event, a, b, c, d, e );\n            if( c !== void 0 ) trigger3( this, event, a, b, c );\n            else trigger2( this, event, a, b );\n        }\n    );\n}\n\n/** @hidden */\nexport interface HandlersByEvent {\n    [ name : string ] : EventHandler\n}\n\n/** @hidden */\nexport class EventHandler {\n    constructor( public callback : Callback, public context : any, public next = null ){}\n}\n\n/** @hidden */\nfunction listOff( _events : HandlersByEvent, name : string, callback : Callback, context : any ){\n    const head = _events[ name ];\n\n    let filteredHead, prev;\n\n    for( let ev = head; ev; ev = ev.next ){\n        // Element must be kept\n        if( ( callback && callback !== ev.callback && callback !== ev.callback._callback ) ||\n            ( context && context !== ev.context ) ){\n            \n            prev = ev;\n            filteredHead || ( filteredHead = ev );\n        }\n        // Element must be skipped\n        else{\n            if( prev ) prev.next = ev.next;\n        }\n    }\n\n    if( head !== filteredHead ) _events[ name ] = filteredHead;\n}\n\n/** @hidden */\nfunction listSend2( head : EventHandler, a, b ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b );\n}\n\n/** @hidden */\nfunction listSend3( head : EventHandler, a, b, c ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c );\n}\n\n/** @hidden */\nfunction listSend4( head : EventHandler, a, b, c, d ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d );\n}\n\n/** @hidden */\nfunction listSend5( head : EventHandler, a, b, c, d, e ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e );\n}\n\n/** @hidden */\nfunction listSend6( head : EventHandler, a, b, c, d, e, f ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e, f );\n}\n\n/** @hidden */\nexport interface Callback extends Function {\n    _callback? : Function\n}\n\n/** @hidden */\nexport function on( source : EventSource, name : string, callback : Callback, context? : any ) : void {\n    if( callback ){\n        const _events = source._events || ( source._events = Object.create( null ) );\n        _events[ name ] = new EventHandler( callback, context, _events[ name ] );\n    }\n}\n\n/** @hidden */\nexport function once( source : EventSource, name : string, callback : Callback, context? : any ) : void {\n    if( callback ){\n        const once : Callback = _once( function(){\n            off( source, name, once );\n            callback.apply(this, arguments);\n        });\n\n        once._callback = callback;\n        on( source, name, once, context );\n    }\n}\n\n/** @hidden */\nexport function off( source : EventSource, name? : string, callback? : Callback, context? : any ) : void {\n    const { _events } = source;\n    if( _events ){\n        if( callback || context ) {\n            if( name ){\n                listOff( _events, name, callback, context );\n            }\n            else{\n                for( let name in _events ){\n                    listOff( _events, name, callback, context );\n                }\n            }\n        }\n        else if( name ){\n            _events[ name ] = void 0;\n        }\n        else{\n            source._events = void 0;\n        }\n    }\n}\n\n/** @hidden */\nexport interface EventSource {\n    _events : HandlersByEvent\n}\n\n/** @hidden */\nconst eventSplitter = /\\s+/;\n\n/** @hidden */\nexport function strings( api : ApiEntry, source : EventSource, events : string, callback : Callback, context ){\n    if( eventSplitter.test( events ) ){\n        const names = events.split( eventSplitter );\n        for( let name of names ) api( source, name, callback, context );\n    }\n    else api( source, events, callback, context );\n}\n\n/** @hidden */\nexport type ApiEntry = ( source : EventSource, event : string, callback : Callback, context? : any ) => void\n\n/*********************************\n * Event-triggering API\n */\n\n/** @hidden */\nexport function trigger2( self : EventSource, name : string, a, b ) : void {\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend2( queue, a, b );\n        listSend3( all, name, a, b );\n    }\n};\n\n/** @hidden */\nexport function trigger3( self : EventSource, name : string, a, b, c ) : void{\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend3( queue, a, b, c );\n        listSend4( all, name, a, b, c );\n    }\n};\n\n/** @hidden */\nexport function trigger5( self : EventSource, name : string, a, b, c, d, e ) : void{\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend5( queue, a, b, c, d, e );\n        listSend6( all, name, a, b, c, d, e );\n    }\n};","/*****************************************************************\n * Mixins engine and @define metaprogramming class extensions\n *\n * Vlad Balin & Volicon, (c) 2016-2017\n */\nimport { __extends } from 'tslib';\nimport { assign, defaults, getBaseClass, hashMap, transform } from './tools';\n\nexport interface Subclass< T > extends MixableConstructor {\n    new ( ...args ) : T\n    prototype : T\n}\n\nexport interface MixableConstructor extends Function{\n    __super__? : object;\n    mixins? : MixinsState;\n    onExtend? : ( BaseClass : Function ) => void;\n    onDefine? : ( definition : object, BaseClass : Function ) => void;\n    define? : ( definition? : object, statics? : object ) => MixableConstructor;\n    extend? : <T extends object>( definition? : T, statics? : object ) => Subclass<T>;\n}\n\nexport interface MixableDefinition {\n    mixins? : Mixin[]\n}\n\n/**\n * Base class, holding metaprogramming class extensions.\n * Supports mixins and Class.define metaprogramming method.\n */\nexport class Mixable {\n    static onExtend : ( BaseClass : Function ) => void;\n    static onDefine : ( definition : object, BaseClass : Function ) => object;    \n    static __super__ : object\n    static mixins : MixinsState;\n\n    /** \n     *  Must be called after inheritance and before 'define'.\n     */\n    static define( protoProps : MixableDefinition = {}, staticProps? : object ) : MixableConstructor {\n        const BaseClass : MixableConstructor = getBaseClass( this );\n\n        // Assign statics.\n        staticProps && assign( this, staticProps );\n\n        // Extract and apply mixins from the definition.\n        const { mixins, ...defineMixin } = protoProps;\n        mixins && this.mixins.merge( mixins );\n\n        // Unshift definition to the the prototype.\n        this.mixins.mergeObject( this.prototype, defineMixin, true );\n\n        // Unshift definition from statics to the prototype.\n        this.mixins.mergeObject( this.prototype, this.mixins.getStaticDefinitions( BaseClass ), true );\n\n        // Call onDefine hook, if it's present.\n        this.onDefine && this.onDefine( this.mixins.definitions, BaseClass );\n        \n        // Apply merge rules to inherited members. No mixins can be added after this point.\n        this.mixins.mergeInheritedMembers( BaseClass );\n\n        return this;\n    }\n\n    /** Backbone-compatible extend method to be used in ES5 and for backward compatibility */\n    static extend< T extends object>(spec? : T, statics? : {} ) : Subclass< T > {\n        let TheSubclass : Subclass< T >;\n\n        // 1. Create the subclass (ES5 compatibility shim).\n        // If constructor function is given...\n        if( spec && spec.hasOwnProperty( 'constructor' ) ){\n            // ...we need to manually call internal TypeScript __extend function. Hack! Hack!\n            TheSubclass = spec.constructor as any;\n            __extends( TheSubclass, this );\n        }\n        // Otherwise, create the subclall in usual way.\n        else{\n            TheSubclass = class Subclass extends this {} as any;\n        }\n\n        predefine( TheSubclass );\n        spec && TheSubclass.define( spec, statics );\n\n        return TheSubclass;\n    }\n}\n\n/** @decorator `@predefine` for forward definitions. Can be used with [[Mixable]] classes only.\n * Forwards the call to the [[Mixable.predefine]];\n */\nexport function predefine( Constructor : MixableConstructor ) : void {\n    const BaseClass : MixableConstructor = getBaseClass( Constructor );\n\n    // Legacy systems support\n    Constructor.__super__ = BaseClass.prototype;\n    \n    // Initialize mixins structures...\n    Constructor.define || MixinsState.get( Mixable ).populate( Constructor );\n\n    // Make sure Ctor.mixins are ready before the callback...\n    MixinsState.get( Constructor );\n\n    // Call extend hook.\n    Constructor.onExtend && Constructor.onExtend( BaseClass );\n}\n\n/** @decorator `@define` for metaprogramming magic. Can be used with [[Mixable]] classes only.\n *  Forwards the call to [[Mixable.define]].\n */\nexport function define( ClassOrDefinition : Function ) : void;\nexport function define( ClassOrDefinition : object ) : ClassDecorator;\nexport function define( ClassOrDefinition : object | MixableConstructor ){\n    // @define class\n    if( typeof ClassOrDefinition === 'function' ){\n        predefine( ClassOrDefinition );\n        ( ClassOrDefinition as MixableConstructor ).define();\n    }\n    // @define({ prop : val, ... }) class\n    else{\n        return function( Ctor : MixableConstructor ){\n            predefine( Ctor );\n            Ctor.define( ClassOrDefinition );\n        }\n    }\n}\n\nexport function definitions( rules : MixinMergeRules ) : ClassDecorator {\n    return ( Class : Function ) => {\n        const mixins = MixinsState.get( Class );\n        mixins.definitionRules = defaults( hashMap(), rules, mixins.definitionRules );\n    }\n}\n\n// Create simple property list decorator\nexport function propertyListDecorator( listName: string ) : PropertyDecorator {\n    return function propList(proto, name : string) {\n        const list = proto.hasOwnProperty( listName ) ?\n            proto[ listName ] : (proto[ listName ] = (proto[ listName ] || []).slice());  \n\n        list.push(name);\n    }\n}\n\nexport function definitionDecorator( definitionKey, value ){\n    return ( proto : object, name : string ) => {\n        MixinsState\n            .get( proto.constructor )\n            .mergeObject( proto, {\n                [ definitionKey ] : {\n                    [ name ] : value\n                }\n            });\n    }\n}\n\nexport class MixinsState {\n    mergeRules : MixinMergeRules;\n    definitionRules : MixinMergeRules;\n    definitions : object = {};\n    appliedMixins : Mixin[];\n\n    // Return mixins state for the class. Initialize if it's not exist.\n    static get( Class ) : MixinsState {\n        const { mixins } = Class;\n    \n        return mixins && Class === mixins.Class ? mixins :\n             Class.mixins = new MixinsState( Class );\n    }\n\n    constructor( public Class : MixableConstructor ){\n        const { mixins } = getBaseClass( Class );\n\n        this.mergeRules = ( mixins && mixins.mergeRules ) || hashMap();\n        this.definitionRules = ( mixins && mixins.definitionRules ) || hashMap();\n        this.appliedMixins = ( mixins && mixins.appliedMixins ) || [];\n    }\n\n    getStaticDefinitions( BaseClass : Function ){\n        const definitions = hashMap(),\n            { Class } = this;\n\n        return transform( definitions, this.definitionRules, ( rule, name ) =>{\n            if( BaseClass[ name ] !== Class[ name ]){\n                return Class[ name ];\n            }\n        });\n    }\n\n    merge( mixins : Mixin[] ){\n        const proto      = this.Class.prototype,\n            { mergeRules } = this;\n\n        // Copy applied mixins array as it's going to be updated.\n        const appliedMixins = this.appliedMixins = this.appliedMixins.slice();\n\n        // Apply mixins in sequence...\n        for( let mixin of mixins ) {\n            // Mixins array should be flattened.\n            if( Array.isArray( mixin ) ) {\n                this.merge( mixin );\n            }\n            // Don't apply mixins twice.\n            else if( appliedMixins.indexOf( mixin ) < 0 ){\n                appliedMixins.push( mixin );\n\n                // For constructors, merge _both_ static and prototype members.\n                if( typeof mixin === 'function' ){\n                    // Merge static members\n                    this.mergeObject( this.Class, mixin );\n\n                    // merge definitionRules and mergeRules\n                    const sourceMixins = ( mixin as any ).mixins;\n                    if( sourceMixins ){\n                        this.mergeRules = defaults( hashMap(), this.mergeRules, sourceMixins.mergeRules );\n                        this.definitionRules = defaults( hashMap(), this.definitionRules, sourceMixins.definitionRules );\n                        this.appliedMixins = this.appliedMixins.concat( sourceMixins.appliedMixins );\n                    }\n\n                    // Prototypes are merged according with rules.\n                    this.mergeObject( proto, mixin.prototype );\n                }\n                // Handle plain object mixins.\n                else {\n                    this.mergeObject( proto, mixin );\n                }\n            }\n        }\n    }\n\n    populate( ...ctors : Function[] ){\n        for( let Ctor of ctors ) {\n            MixinsState.get( Ctor ).merge([ this.Class ]);\n        }\n    }\n\n    mergeObject( dest : object, source : object, unshift? : boolean ) {\n        forEachOwnProp( source, name => {\n            const sourceProp = Object.getOwnPropertyDescriptor( source, name );\n            let rule : MixinMergeRule;\n\n            if( rule = this.definitionRules[ name ] ){\n                assignProperty( this.definitions, name, sourceProp, rule, unshift );\n            }\n\n            if( !rule || rule === mixinRules.protoValue  ){\n                assignProperty( dest, name, sourceProp, this.mergeRules[ name ], unshift );\n            }\n        });\n    }\n\n    mergeInheritedMembers( BaseClass : Function ){\n        const { mergeRules, Class } = this;\n\n        if( mergeRules ){\n            const proto = Class.prototype,\n                baseProto = BaseClass.prototype;\n\n            for( let name in mergeRules ) {\n                const rule = mergeRules[ name ];\n\n                if( proto.hasOwnProperty( name ) && name in baseProto ){\n                    proto[ name ] = resolveRule( proto[ name ], baseProto[ name ], rule );\n                }\n            }\n        }\n    }\n}\n\nconst dontMix = {\n    function : hashMap({\n        length : true,\n        prototype : true,\n        caller : true,\n        arguments : true,\n        name : true,\n        __super__ : true\n    }),\n    \n    object : hashMap({\n        constructor : true\n    })    \n}\n\nfunction forEachOwnProp( object : object, fun : ( name : string ) => void ){\n    const ignore = dontMix[ typeof object ];\n\n    for( let name of Object.getOwnPropertyNames( object ) ) {\n        ignore[ name ] || fun( name );\n    }\n}\n\nexport interface MixinMergeRules {\n    [ name : string ] : MixinMergeRule\n}\n\nexport type MixinMergeRule = ( a : any, b : any ) => any\nexport type Mixin = { [ key : string ] : any } | Function\n\n// @mixins( A, B, ... ) decorator.\nexport interface MixinRulesDecorator {\n    ( rules : MixinMergeRules ) : ClassDecorator\n    value( a : object, b : object) : object;\n    protoValue( a : object, b : object) : object;\n    merge( a : object, b : object ) : object;\n    pipe( a: Function, b : Function ) : Function;\n    defaults( a: Function, b : Function ) : Function;\n    classFirst( a: Function, b : Function ) : Function;\n    classLast( a: Function, b : Function ) : Function;\n    every( a: Function, b : Function ) : Function;\n    some( a: Function, b : Function ) : Function;\n}\n\nexport const mixins = ( ...list : Mixin[] ) => (\n    ( Class : Function ) => MixinsState.get( Class ).merge( list )\n);\n\n// @mixinRules({ name : rule, ... }) decorator.\nexport const mixinRules = ( ( rules : MixinMergeRules ) => (\n    ( Class : Function ) => {\n        const mixins = MixinsState.get( Class );\n        mixins.mergeRules = defaults( rules, mixins.mergeRules );\n    }\n) ) as MixinRulesDecorator;\n\n// Pre-defined mixin merge rules\n\nmixinRules.value = ( a, b ) => a;\n\nmixinRules.protoValue = ( a, b ) => a;\n\n// Recursively merge members\nmixinRules.merge = ( a, b ) => defaults( {}, a, b );\n\n    // Execute methods in pipe, with the class method executed last.\nmixinRules.pipe = ( a, b ) => (\n    function( x : any ) : any {\n        return a.call( this, b.call( this, x ) );\n    }\n);\n\n    // Assume methods return an object, and merge results with defaults (class method executed first)\nmixinRules.defaults = ( a : Function, b : Function ) => (\n    function() : object {\n        return defaults( a.apply( this, arguments ), b.apply( this, arguments ) );\n    }\n);\n\n// Execute methods in sequence staring with the class method.\nmixinRules.classFirst = ( a : Function, b : Function ) => (\n    function() : void {\n        a.apply( this, arguments );\n        b.apply( this, arguments );\n    }\n);\n\n    // Execute methods in sequence ending with the class method.\nmixinRules.classLast = ( a : Function, b : Function ) => (\n    function() : void {\n        b.apply( this, arguments );\n        a.apply( this, arguments );\n    }\n)\n\n    // Execute methods in sequence returning the first falsy result.\nmixinRules.every = ( a : Function, b : Function ) =>(\n    function() : any {\n        return a.apply( this, arguments ) && b.apply( this, arguments );\n    }\n);\n    // Execute methods in sequence returning the first truthy result.\nmixinRules.some = ( a : Function, b : Function ) =>(\n    function() : any {\n        return a.apply( this, arguments ) || b.apply( this, arguments );\n    }\n);\n\n/**\n * Helpers\n */\n\nfunction assignProperty( dest : object, name : string, sourceProp : PropertyDescriptor, rule : MixinMergeRule, unshift? : boolean ){\n// Destination prop is defined, thus the merge rules must be applied.\n    if( dest.hasOwnProperty( name ) ){\n        const destProp = Object.getOwnPropertyDescriptor( dest, name );\n\n        if( destProp.configurable && 'value' in destProp ){\n            dest[ name ] = unshift ?\n                resolveRule( sourceProp.value, destProp.value, rule ) :\n                resolveRule( destProp.value, sourceProp.value, rule ) ;\n        }\n    }\n    // If destination is empty, just copy the prop over.\n    else{\n        Object.defineProperty( dest, name, sourceProp );\n    }\n}\n\nfunction resolveRule( dest, source, rule : MixinMergeRule ){\n    // When destination is empty, take the source.\n    if( dest === void 0 ) return source;\n\n    // In these cases we take non-empty destination:\n    if( !rule || source === void 0 ) return dest;\n\n    // In other cases we must merge values.\n    return rule( dest, source );\n}","import * as _eventsApi from './eventsource';\nimport { EventMap, EventsDefinition, EventSource, HandlersByEvent } from './eventsource';\nimport { define, definitions, Mixable, MixableConstructor, mixinRules, MixinsState } from './mixins';\nimport { omit, transform } from './tools';\n\nconst { strings, on, off, once, trigger5, trigger2, trigger3 } = _eventsApi;\n\n/** @hidden */\nlet _idCount = 0;\n\n/** @hidden */\nfunction uniqueId() : string {\n    return 'l' + _idCount++;\n}\n\nexport { EventMap, EventsDefinition };\n\nexport interface MessengerDefinition {\n    _localEvents? : EventMap\n    localEvents? : EventsDefinition\n    properties? : PropertyMap\n    [ name : string ] : any\n}\n\nexport interface PropertyMap {\n    [ name : string ] : Property\n}\n\nexport type Property = PropertyDescriptor | ( () => any )\n\n/** @hidden */\nexport interface MessengersByCid {\n    [ cid : string ] : Messenger\n}\n\n/** @hidden */\nexport type CallbacksByEvents = { [ events : string ] : Function }\n\n/*************************\n * Messenger is mixable class with capabilities of sending and receiving synchronous events.\n * This class itself can serve as both mixin and base class.\n */\n\n@define\n@definitions({\n    properties : mixinRules.merge,\n    localEvents : mixinRules.merge\n})\nexport class Messenger implements Mixable, EventSource {\n    // Define extendable mixin static properties.\n    static __super__ : object;\n    static mixins : MixinsState;\n    static onExtend : ( BaseClass : Function ) => void;\n    static define : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\n    static extend : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\n    static onDefine({ localEvents, _localEvents, properties } : MessengerDefinition, BaseClass? : typeof Mixable ){\n        // Handle localEvents definition\n        if( localEvents || _localEvents ){\n            const eventsMap = new EventMap( this.prototype._localEvents );\n\n            localEvents && eventsMap.addEventsMap( localEvents );\n            _localEvents && eventsMap.merge( _localEvents );\n            \n            this.prototype._localEvents = eventsMap;\n        }\n\n        // Handle properties definitions...\n        if( properties ){\n            Object.defineProperties( this.prototype, transform( {}, <PropertyMap>properties, toPropertyDescriptor ) );\n        }\n    }\n\n    /** @hidden */ \n    _events : HandlersByEvent = void 0;\n\n    /** @hidden */ \n    _listeningTo : MessengersByCid = void 0\n\n    /** Unique client-only id. */\n    cid : string\n\n    /** @hidden Prototype-only property to manage automatic local events subscription */ \n    _localEvents : EventMap\n\n    /** @hidden */ \n    constructor(){\n        this.cid = uniqueId();\n        this.initialize.apply( this, arguments );\n\n        // TODO: local events subscribe?\n    }\n\n    /** Method is called at the end of the constructor */\n    initialize() : void {}\n    \n    on( events : string | CallbacksByEvents, callback, context? ) : this {\n        if( typeof events === 'string' ) strings( on, this, events, callback, context );\n        else for( let name in events ) strings( on, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    once( events : string | CallbacksByEvents, callback, context? ) : this {\n        if( typeof events === 'string' ) strings( once, this, events, callback, context );\n        else for( let name in events ) strings( once, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    off( events? : string | CallbacksByEvents, callback?, context? ) : this {\n        if( !events ) off( this, void 0, callback, context );\n        else if( typeof events === 'string' ) strings( off, this, events, callback, context );\n        else for( let name in events ) strings( off, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    trigger(name : string, a?, b?, c?, d?, e? ) : this {\n        if( d !== void 0 || e !== void 0 ) trigger5( this, name, a, b, c, d, e );\n        else if( c !== void 0 ) trigger3( this, name, a, b, c );\n        else trigger2( this, name, a, b );\n        return this;\n    }\n\n    listenTo( source : Messenger, a : string | CallbacksByEvents, b? : Function ) : this {\n        if( source ){\n            addReference( this, source );\n            source.on( a, !b && typeof a === 'object' ? this : b, this );\n        }\n\n        return this;\n    }\n\n    listenToOnce( source : Messenger, a : string | CallbacksByEvents, b? : Function ) : this {\n        if( source ){\n            addReference( this, source );\n            source.once( a, !b && typeof a === 'object' ? this : b, this );\n        }\n\n        return this;\n    }\n\n    stopListening( a_source? : Messenger, a? : string | CallbacksByEvents, b? : Function ) : this {\n        const { _listeningTo } = this;\n        if( _listeningTo ){\n            const removeAll = !( a || b ),\n                  second = !b && typeof a === 'object' ? this : b;\n\n            if( a_source ){\n                const source = _listeningTo[ a_source.cid ];\n                if( source ){\n                    if( removeAll ) delete _listeningTo[ a_source.cid ];\n                    source.off( a, second, this );\n                }\n            }\n            else if( a_source == null ){\n                for( let cid in _listeningTo ) _listeningTo[ cid ].off( a, second, this );\n\n                if( removeAll ) ( this._listeningTo = void 0 );\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Destructor. Stops messenger from listening to all objects,\n     * and stop others from listening to the messenger. \n     */\n    _disposed : boolean\n\n    dispose() : void {\n        if( this._disposed ) return;\n\n        this.stopListening();\n        this.off();\n\n        this._disposed = true;\n    }\n}\n\n/**\n * Backbone 1.2 API conformant Events mixin.\n */\nexport const Events : Messenger = <Messenger> omit( Messenger.prototype, 'constructor', 'initialize' );\n\n/**\n * Messenger Private Helpers \n */\n\nfunction toPropertyDescriptor( x : Property ) : PropertyDescriptor {\n    if( x ){\n        return typeof x === 'function' ? { get : < () => any >x, configurable : true } : <PropertyDescriptor> x;\n    }\n}\n\n/** @hidden */\nfunction addReference( listener : Messenger, source : Messenger ){\n      const listeningTo = listener._listeningTo || (listener._listeningTo = Object.create( null ) ),\n            cid = source.cid || ( source.cid = uniqueId() );\n\n      listeningTo[ cid ] = source;\n}","import { Messenger } from './events'\nimport { define } from './mixins';\n\nexport type LogLevel = 'error' | 'warn' | 'debug' | 'info' | 'log';\nexport type LoggerEventHandler = ( topic : string, msg : string, props : object )  => void;\n\nexport const isProduction = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'production',\n    logEvents : LogLevel[] =  isProduction ?\n        [ 'error', 'info' ] :\n        [ 'error', 'warn', 'debug', 'info', 'log' ];\n\n@define\nexport class Logger extends Messenger {\n    counter : { [ level in LogLevel ]? : number } = {}\n\n    // Log events of the given log level to the console, optionally filtered by topic\n    logToConsole( level : LogLevel, filter? : RegExp ) : this {\n        return this.on( level, ( topic, msg, props ) => {\n            if( !filter || filter.test( topic ) ){\n                const args = [ `[${topic}] ${msg}` ];\n        \n                for( let name in props ){\n                    args.push( `\\n\\t${name}:`, toString( props[ name ] ) );\n                }\n        \n                console[ level ].apply( console, args );\n            }\n        });\n    }\n\n    // Fire exception on the events of the given log level, optionally filtered by topic\n    throwOn( level : LogLevel, filter? : RegExp ) : this {\n        return this.on( level, ( topic, msg, props ) => {\n            if( !filter || filter.test( topic ) ){\n                throw new Error( `[${topic}] ${msg}` );\n            }\n        });\n    }\n\n    // Count log events of the given level, optionally filtered by topic\n    count( level : LogLevel, filter? : RegExp ) : this {\n        return this.on( level, ( topic, msg, props ) => {\n            if( !filter || filter.test( topic ) ){\n                this.counter[ level ] = ( this.counter[ level ] || 0 ) + 1;\n            }\n        });\n    }\n\n    trigger : ( level : LogLevel, topic : string, message : string, props? : object ) => this;\n    \n    off : ( event? : LogLevel ) => this;\n    on : ( handlers : { [ name in LogLevel ] : LoggerEventHandler } | LogLevel, handler? : LoggerEventHandler ) => this\n}\n\n/**\n * Convert objects to the plain text friendly format.\n * primitives as in JSON.\n */\nlet toString = typeof window === 'undefined' ? \n    something => {\n        if( something && typeof something === 'object' ){\n            const { __inner_state__ } = something,\n                value = __inner_state__ || something,\n                isArray = Array.isArray( value );\n\n            const body = isArray ? `[ length = ${ value.length } ]` : `{ ${ Object.keys( value ).join( ', ' )} }`;\n\n            return something.constructor.name + ' ' + body;\n        }\n\n        return JSON.stringify( something );\n    }\n    : x => x;\n\nexport const logger = new Logger();\n\nif( typeof console !== 'undefined' ) {\n    for( let event of logEvents ){\n        logger.logToConsole( event );\n    }\n}\n\nexport const log : typeof logger.trigger = logger.trigger.bind( logger );","export interface IONode {\n    _endpoint : IOEndpoint\n    _ioPromise : IOPromise< this >\n}\n\nexport interface IOPromise<T> extends Promise<T> {\n    abort? : () => void\n}\n\nexport interface IOEndpoint {\n    list( options : IOOptions, collection? ) : IOPromise<any>\n    create( json : any, options : IOOptions, record? ) : IOPromise<any>\n    update( id : string | number, json :any, options : IOOptions, record? ) : IOPromise<any>\n    read( id : string | number, options : IOOptions, record? ) : IOPromise<any>\n    destroy( id : string | number, options : IOOptions, record? ) : IOPromise<any>\n    subscribe( events : IOEvents, collection? ) : IOPromise<any>\n    unsubscribe( events : IOEvents, collection? ) : void\n}\n\nexport interface IOOptions {\n    ioUpdate? : boolean\n}\n\nexport interface IOEvents {\n    updated? : ( json : any ) => void\n    removed? : ( json : any ) => void\n}\n\nexport function getOwnerEndpoint( self ) : IOEndpoint {\n    // Check if we are the member of the collection...\n    const { collection } = self;\n    if( collection ){\n        return getOwnerEndpoint( collection );\n    }\n\n    // Now, if we're the member of the model...\n    if( self._owner ){\n        const { _endpoints } = self._owner;\n        return _endpoints && _endpoints[ self._ownerKey ];\n    }\n}\n\n/**\n * Create abortable promise.\n * Adds `promise.abort()` function which rejects the promise by default\n * initialize() function takes third optional argument `abort : ( resolve, reject ) => void`,\n * which can be used to add custom abort handling.\n */\ndeclare var Promise: PromiseConstructorLike;\n\nexport function createIOPromise( initialize : InitIOPromise ) : IOPromise<any>{\n    let resolve, reject, onAbort;\n\n    function abort( fn ){\n        onAbort = fn;\n    }\n\n    const promise : IOPromise<any> = new Promise( ( a_resolve, a_reject ) =>{\n        reject = a_reject;\n        resolve = a_resolve;\n        initialize( resolve, reject, abort );\n    }) as IOPromise<any>;\n\n    promise.abort = () => {\n        onAbort ? onAbort( resolve, reject ) : reject( new Error( \"I/O Aborted\" ) );\n    }\n\n    return promise;\n}\n\nexport type InitIOPromise = ( resolve : ( x? : any ) => void, reject : ( x? : any ) => void, abort? : ( fn : Function ) => void ) => void;\n\nexport function startIO( self : IONode, promise : IOPromise<any>, options : IOOptions, thenDo : ( json : any ) => any ) : IOPromise<any> {\n    // Stop pending I/O first...\n    abortIO( self );\n\n    // Mark future update transaction as IO transaction.\n    options.ioUpdate = true;\n\n    self._ioPromise = promise\n        .then( resp => {\n            self._ioPromise = null;\n    \n            const result = thenDo ? thenDo( resp ) : resp;\n                \n            triggerAndBubble( self, 'sync', self, resp, options );\n                \n            return result;\n        } )  \n        .catch( err => {\n            self._ioPromise = null;\n            \n            // Overlaps with a new `error` event.\n            triggerAndBubble( self, 'error', self, err, options );\n            \n            throw err;\n        } ) as IOPromise<any>;\n\n    self._ioPromise.abort = promise.abort;\n\n    return self._ioPromise;\n}\n\nexport function abortIO( self : IONode ){\n    if( self._ioPromise && self._ioPromise.abort ){\n        self._ioPromise.abort();\n        self._ioPromise = null;\n    }\n}\n\nexport function triggerAndBubble( eventSource, ...args ){\n    eventSource.trigger.apply( eventSource, args );\n    const { collection } = eventSource;\n    collection && collection.trigger.apply( collection, args ); \n}","/**\n * Some sketches for reference resolution.\n *\n * \n * a : Model.from( '~collection' )\n * \n * We need two functions. One for get, and one for compile. \n */\nexport interface Traversable {\n    getStore() : Traversable\n    getOwner() : Traversable\n    get( key : string ) : any \n}\n\nconst referenceMask =  /\\^|(store\\.[^.]+)|([^.]+)/g;\n\n// Compile reference to function\nexport type ResolveReference = ( root : Traversable ) => any;  \n\nexport class CompiledReference {\n    resolve : ResolveReference\n    tail : string\n    local : boolean\n\n    constructor( reference : string, splitTail : boolean = false ){\n        const path = reference\n                        .match( referenceMask )\n                        .map( key => {\n                            if( key === '^' || key === 'owner' ) return 'getOwner()';\n\n                            if( key[ 0 ] === '~' ) return `getStore().get(\"${ key.substr( 1 ) }\")`;\n\n                            if( key.indexOf( 'store.' ) === 0 ) return `getStore().get(\"${ key.substr( 6 ) }\")`;\n                            \n                            return key;\n                        } );\n               \n        this.tail = splitTail && path.pop();\n        this.local = !path.length;\n        \n        this.resolve = <any> new Function( 'self', `\n            var v = self.${ path.shift() };\n                           \n            ${ path.map( x => `\n                v = v && v.${ x };\n            `).join('')}\n\n            return v;\n        ` );\n    }\n}\n\nexport function resolveReference( root : Traversable, reference : string, action : ( object, key : string ) => any ) : any {\n    const path = reference.match( referenceMask ),\n          skip = path.length - 1;\n    \n    let self = root;\n\n    for( var i = 0; i < skip; i++ ){\n        const key = path[ i ];\n        switch( key ){\n            case '~' : self = self.getStore(); break;\n            case '^' : self = self.getOwner(); break;\n            default  : self = self.get( key );\n        }\n\n        // Do nothing if object on the path doesn't exist.\n        if( !self ) return;\n    }\n\n    return action( self, path[ skip ] );\n}","export interface ChildrenErrors {\n    [ key : string ] : ValidationError | any\n} \n\nexport interface Validatable {\n    _validateNested( errors : ChildrenErrors ) : number;\n    validate( self : any ) : any\n    get( key : string ) : any\n}\n\n// Validation error object.\nexport class ValidationError {\n    // Invalid nested object keys \n    nested : ChildrenErrors \n    length : number\n\n    // Local error\n    error : any\n\n    constructor( obj : Validatable ){\n        this.length = obj._validateNested( this.nested = {} );\n\n        if( this.error = obj.validate( obj ) ){\n            this.length++;\n        }\n    }\n\n    each( iteratee : ( value : any, key : string ) => void ) : void {\n        const { error, nested } = this;\n\n        if( error ) iteratee( error, null );\n\n        for( const key in nested ){\n            iteratee( nested[ key ], key );\n        }\n    }\n\n    eachError( iteratee : ( error : any, key : string, object : Validatable ) => void, object : Validatable ) : void {\n        this.each( ( value : any, key : string ) => {\n            if( value instanceof ValidationError ){\n                (<ValidationError>value).eachError( iteratee, object.get( key ) );\n            }\n            else{\n                iteratee( value, key, object );\n            }\n        });\n    }\n}","import { abortIO, IOEndpoint, IONode, IOPromise } from './io-tools';\nimport { CallbacksByEvents, define, definitions, eventsApi, Messenger, MessengerDefinition, MessengersByCid, mixinRules, mixins, MixinsState, log, LogLevel, Logger } from './object-plus';\nimport { resolveReference, Traversable } from './traversable';\nimport { ChildrenErrors, Validatable, ValidationError } from './validation';\n\nconst { trigger3, on, off } = eventsApi;\n/***\n * Abstract class implementing ownership tree, tho-phase transactions, and validation. \n * 1. createTransaction() - apply changes to an object tree, and if there are some events to send, transaction object is created.\n * 2. transaction.commit() - send and process all change events, and close transaction.\n */\n\n/** @private */\nexport interface TransactionalDefinition extends MessengerDefinition {\n    endpoint? : IOEndpoint\n}\n\nexport enum ItemsBehavior {\n    share       = 0b0001,\n    listen      = 0b0010,\n    persistent  = 0b0100\n}\n\n// Transactional object interface\n@define\n@definitions({\n    endpoint : mixinRules.value\n})\n@mixins( Messenger )\nexport abstract class Transactional implements Messenger, IONode, Validatable, Traversable {\n    // Mixins are hard in TypeScript. We need to copy type signatures over...\n    // Here goes 'Mixable' mixin.\n    static endpoint : IOEndpoint;\n    static __super__ : object;\n    static mixins : MixinsState;\n    static define : ( definition? : TransactionalDefinition, statics? : object ) => typeof Transactional;\n    static extend : <T extends TransactionalDefinition>( definition? : T, statics? : object ) => any;\n\n    static onDefine( definitions : TransactionalDefinition, BaseClass : typeof Transactional ){\n        if( definitions.endpoint ) this.prototype._endpoint = definitions.endpoint;\n        Messenger.onDefine.call( this, definitions, BaseClass );\n    };\n\n    static onExtend( BaseClass : typeof Transactional ) : void {\n        // Make sure we don't inherit class factories.\n        if( BaseClass.create === this.create ) {\n            this.create = Transactional.create;\n        }\n    }\n\n    // Define extendable mixin static properties.\n    static create( a : any, b? : any ) : Transactional {\n        return new (this as any)( a, b );\n    }\n\n    /** Generic class factory. May be overridden for abstract classes. Not inherited. */\n    on : ( events : string | CallbacksByEvents, callback, context? ) => this\n    once : ( events : string | CallbacksByEvents, callback, context? ) => this\n    off : ( events? : string | CallbacksByEvents, callback?, context? ) => this\n    trigger      : (name : string, a?, b?, c?, d?, e? ) => this\n\n    stopListening : ( source? : Messenger, a? : string | CallbacksByEvents, b? : Function ) => this\n    listenTo : ( source : Messenger, a : string | CallbacksByEvents, b? : Function ) => this\n    listenToOnce : ( source : Messenger, a : string | CallbacksByEvents, b? : Function ) => this\n    \n    _disposed : boolean;\n\n    // State accessor. \n    readonly __inner_state__ : any;\n\n    // Shared modifier (used by collections of shared models)\n    _shared? : number; \n    \n    dispose() : void {\n        if( this._disposed ) return;\n        \n        abortIO( this );\n        this._owner = void 0;\n        this._ownerKey = void 0;\n        this.off();\n        this.stopListening();\n        this._disposed = true;\n    }\n\n    // Must be called at the end of the constructor in the subclass.\n    initialize() : void {}\n\n    /** @private */\n    _events : eventsApi.HandlersByEvent = void 0;\n\n    /** @private */\n    _listeningTo : MessengersByCid\n\n    /** @private */\n    _localEvents : eventsApi.EventMap\n\n    cid : string\n    cidPrefix : string\n\n    static shared : any;\n\n    // Unique version token replaced on change\n    /** @private */\n    _changeToken : {} = {}\n\n    // true while inside of the transaction\n    /** @private */\n    _transaction : boolean = false;\n\n    // Holds current transaction's options, when in the middle of transaction and there're changes but is an unsent change event\n    /** @private */\n    _isDirty  : TransactionOptions = null;\n\n    // Backreference set by owner (Record, Collection, or other object)\n    /** @private */\n    _owner : Owner = void 0;\n\n    // Key supplied by owner. Used by record to identify attribute key.\n    // Only collections doesn't set the key, which is used to distinguish collections.\n    /** @private */  \n    _ownerKey : string = void 0;\n\n    // Name of the change event\n    /** @private */\n    _changeEventName : string\n\n    /**\n     * Subsribe for the changes.\n     */\n    onChanges( handler : Function, target? : Messenger ){\n        on( this, this._changeEventName, handler, target );\n    }\n\n    /**\n     * Unsubscribe from changes.\n     */\n    offChanges( handler? : Function, target? : Messenger ){\n        off( this, this._changeEventName, handler, target );\n    }\n\n    /**\n     * Listen to changes event. \n     */\n    listenToChanges( target : Transactional, handler ){\n        this.listenTo( target, target._changeEventName, handler );\n    }\n\n    constructor( cid : string | number ){\n        this.cid = this.cidPrefix + cid;\n    }\n\n    // Deeply clone ownership subtree\n    abstract clone( options? : CloneOptions ) : this\n    \n    // Execute given function in the scope of ad-hoc transaction.\n    transaction( fun : ( self : this ) => void, options : TransactionOptions = {} ) : void{\n        const isRoot = transactionApi.begin( this );\n        const update = fun.call( this, this );\n        update && this.set( update );\n        isRoot && transactionApi.commit( this );\n    }\n\n    // Assign transactional object \"by value\", copying aggregated items.\n    assignFrom( source : Transactional | Object ) : this {\n        // Need to delay change events until change token willl by synced.\n        this.transaction( () =>{\n            this.set( ( <any>source ).__inner_state__ || source, { merge : true } );\n\n            // Synchronize change tokens\n            const { _changeToken } = source as any;\n    \n            if( _changeToken ){\n                this._changeToken = _changeToken;\n            }    \n        });\n\n        return this;\n    }\n\n    // Apply bulk object update without any notifications, and return open transaction.\n    // Used internally to implement two-phase commit.\n    // Returns null if there are no any changes.\n    /** @private */  \n    abstract _createTransaction( values : any, options? : TransactionOptions ) : Transaction | void\n\n    // Apply bulk in-place object update in scope of ad-hoc transaction \n    abstract set( values : any, options? : TransactionOptions ) : this;\n\n    \n    // Parse function applied when 'parse' option is set for transaction.\n    parse( data : any, options? : TransactionOptions ) : any { return data }\n\n    // Convert object to the serializable JSON structure\n    abstract toJSON( options? : object ) : {}\n\n    /*******************\n     * Traversals and member access\n     */\n    \n    // Get object member by its key.\n    abstract get( key : string ) : any\n\n    // Get object member by symbolic reference.\n    deepGet( reference : string ) : any {\n        return resolveReference( this, reference, ( object, key ) => object.get ? object.get( key ) : object[ key ] );\n    }\n\n    //_isCollection : boolean\n\n    // Return owner skipping collections.\n    getOwner() : Owner {\n        return this._owner;\n    }\n\n    // Store used when owner chain store lookup failed. Static value in the prototype. \n    /** @private */\n    _defaultStore : Transactional\n\n    // Locate the closest store. Store object stops traversal by overriding this method. \n    getStore() : Transactional {\n        const { _owner } = this;\n        return _owner ? <Transactional> _owner.getStore() : this._defaultStore;\n    }\n\n\n    /***************************************************\n     * Iteration API\n     */\n\n    // Loop through the members. Must be efficiently implemented in container class.\n\n    _endpoint : IOEndpoint\n    _ioPromise : IOPromise<this>\n\n    hasPendingIO() : IOPromise<this> { return this._ioPromise; }\n\n    fetch( options? : object ) : IOPromise<this> { throw new Error( \"Not implemented\" ); }\n\n    getEndpoint() : IOEndpoint {\n        return getOwnerEndpoint( this ) || this._endpoint;\n    }\n    \n    /*********************************\n     * Validation API\n     */\n\n    // Lazily evaluated validation error\n    /** @private */\n    _validationError : ValidationError = void 0\n\n    // Validate ownership tree and return valudation error \n    get validationError() : ValidationError {\n        const error = this._validationError || ( this._validationError = new ValidationError( this ) );\n        return error.length ? error : null; \n    }\n\n    // Validate nested members. Returns errors count.\n    /** @private */\n    abstract _validateNested( errors : ChildrenErrors ) : number\n\n    // Object-level validator. Returns validation error.\n    validate( obj? : Transactional ) : any {}\n\n    // Return validation error (or undefined) for nested object with the given key. \n    getValidationError( key : string ) : any {\n        var error = this.validationError;\n        return ( key ? error && error.nested[ key ] : error ) || null;\n    }\n\n    // Get validation error for the given symbolic reference.\n    deepValidationError( reference : string ) : any {\n        return resolveReference( this, reference, ( object, key ) => object.getValidationError( key ) );\n    }\n\n    // Iterate through all validation errors across the ownership tree.\n    eachValidationError( iteratee : ( error : any, key : string, object : Transactional ) => void ) : void {\n        const { validationError } = this;\n        validationError && validationError.eachError( iteratee, this );\n    }\n\n    // Check whenever member with a given key is valid. \n    isValid( key : string ) : boolean {\n        return !this.getValidationError( key );\n    }\n\n    valueOf() : Object { return this.cid; }\n    toString(){ return this.cid; }\n\n    // Get class name for an object instance. Works fine with ES6 classes definitions (not in IE).\n    getClassName() : string {\n        const { name } = <any>this.constructor;\n        if( name !== 'Subclass' ) return name;\n    }\n\n    // Logging interface for run time errors and warnings.\n    abstract _log( level : LogLevel, topic : string, text : string, value : any, logger? : Logger ) : void\n}\n\nexport interface CloneOptions {\n    // 'Pin store' shall assign this._defaultStore = this.getStore();\n    pinStore? : boolean\n}\n\n// Owner must accept children update events. It's an only way children communicates with an owner.\n/** @private */\nexport interface Owner extends Traversable, Messenger {\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void;\n    getOwner() : Owner\n    getStore() : Transactional\n}\n\n// Transaction object used for two-phase commit protocol.\n// Must be implemented by subclasses.\n// Transaction must be created if there are actual changes and when markIsDirty returns true.\n/** @private */ \nexport interface Transaction {\n    // Object transaction is being made on.\n    object : Transactional\n\n    // Send out change events, process update triggers, and close transaction.\n    // Nested transactions must be marked with isNested flag (it suppress owner notification).\n    commit( initiator? : Transactional )\n}\n\n// Options for distributed transaction  \nexport interface TransactionOptions {\n    // Invoke parsing \n    parse? : boolean\n\n    // Optional logger\n    logger? : Logger\n\n    // Suppress change notifications and update triggers\n    silent? : boolean\n\n    // Update existing transactional members in place, or skip the update (ignored by models)\n    merge? : boolean // =true\n\n    // Should collections remove elements in set (ignored by models)  \n    remove? : boolean // =true\n\n    // Always replace enclosed objects with new instances\n    reset? : boolean // = false\n\n    // Do not dispose aggregated members\n    unset? : boolean\n\n    validate? : boolean\n\n    // `true` if the transaction is initiated as a result of IO operation\n    ioUpdate? : boolean\n\n    // The hint for IOEndpoint\n    // If `true`, `record.save()` will behave as \"upsert\" operation for the records having id.\n    upsert? : boolean\n}\n\n/**\n * Low-level transactions API. Must be used like this:\n * const isRoot = begin( record );\n * ...\n * isRoot && commit( record, options );\n * \n * When committing nested transaction, the flag must be set to true. \n * commit( object, options, isNested ) \n */\n\nexport const transactionApi = {\n    // Start transaction. Return true if it's the root one.\n    /** @private */\n    begin( object : Transactional ) : boolean {\n        return object._transaction ? false : ( object._transaction = true );  \n    },\n\n    // Mark object having changes inside of the current transaction.\n    // Returns true whenever there notifications are required.\n    /** @private */\n    markAsDirty( object : Transactional, options : TransactionOptions ) : boolean {\n        // If silent option is in effect, don't set isDirty flag.\n        const dirty = !options.silent;\n        if( dirty ) object._isDirty = options;\n        \n        // Reset version token.\n        object._changeToken = {};\n\n        // Object is changed, so validation must happen again. Clear the cache.\n        object._validationError = void 0;\n\n        return dirty;\n    },\n\n    // Commit transaction. Send out change event and notify owner. Returns true if there were changes.\n    // Must be executed for the root transaction only.\n    /** @private */\n    commit( object : Transactional, initiator? : Transactional ){\n        let originalOptions = object._isDirty;\n\n        if( originalOptions ){\n            // Send the sequence of change events, handling chained handlers.\n            while( object._isDirty ){\n                const options = object._isDirty;\n                object._isDirty = null; \n                trigger3( object, object._changeEventName, object, options, initiator );\n            }\n            \n            // Mark transaction as closed.\n            object._transaction = false;\n\n            // Notify owner on changes out of transaction scope.  \n            const { _owner } = object;  \n            if( _owner && _owner !== <any> initiator ){ // If it's the nested transaction, owner is already aware there are some changes.\n                _owner._onChildrenChange( object, originalOptions );\n            }\n        }\n        else{\n            // No changes. Silently close transaction.\n            object._isDirty = null;\n            object._transaction = false;\n        }\n    },\n\n    /************************************\n     * Ownership management\n     */\n\n    // Add reference to the record.\n    /** @private */\n    aquire( owner : Owner, child : Transactional, key? : string ) : boolean {\n        if( !child._owner ){\n            child._owner = owner;\n            child._ownerKey = key;\n            return true;\n        }\n\n        return child._owner === owner;\n    },\n\n    // Remove reference to the record.\n    /** @private */\n    free( owner : Owner, child : Transactional ) : void {\n        if( owner === child._owner ){\n            child._owner = void 0;\n            child._ownerKey = void 0;\n        }\n    }\n}\n\nfunction getOwnerEndpoint( self : Transactional ) : IOEndpoint {\n    // Check if we are the member of the collection...\n    const { collection } = self as any;\n    if( collection ){\n        return getOwnerEndpoint( collection );\n    }\n\n    // Now, if we're the member of the model...\n    if( self._owner ){\n        const { _endpoints } = self._owner as any;\n        return _endpoints && _endpoints[ self._ownerKey ];\n    }\n}\n","import { eventsApi } from '../object-plus';\nimport { Owner, Transaction, Transactional, transactionApi, TransactionOptions } from \"../transactions\";\nconst { begin : _begin, markAsDirty : _markAsDirty, commit } = transactionApi;\n\nconst { trigger3 } = eventsApi;\n\nexport interface ConstructorsMixin {\n    Attributes : AttributesConstructor\n    AttributesCopy : AttributesCopyConstructor\n}\n\nexport interface ConstructorOptions extends TransactionOptions{\n    clone? : boolean\n}\n\nexport type AttributesConstructor = new ( record : AttributesContainer, values : object, options : TransactionOptions ) => AttributesValues;\nexport type AttributesCopyConstructor = new ( values : object ) => AttributesValues;\n\nexport interface AttributesContainer extends Transactional, Owner, ConstructorsMixin {\n    // Attribute descriptors.\n    _attributes : AttributesDescriptors\n\n    // Attribute values.\n    attributes : AttributesValues\n\n    // Previous attribute values.\n    _previousAttributes : AttributesValues\n\n    // Changed attributes cache. \n    _changedAttributes : AttributesValues\n}\n\nexport interface AttributesValues {\n    [ name : string ] : any\n}\n\nexport interface AttributesDescriptors {\n    [ name : string ] : AttributeUpdatePipeline\n}\n\nexport interface AttributeUpdatePipeline{\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : Transaction[] ) : boolean\n}\n\n // Optimized single attribute transactional update. To be called from attributes setters\n // options.silent === false, parse === false. \nexport function setAttribute( record : AttributesContainer, name : string, value : any ) : void {\n    // Open the transaction.\n    const isRoot  = begin( record ),\n          options = {};\n\n    // Update attribute.      \n    if( record._attributes[ name ].doUpdate( value, record, options ) ){\n        // Notify listeners on changes.\n        markAsDirty( record, options );\n        trigger3( record, 'change:' + name, record, record.attributes[ name ], options );\n    }\n\n    // Close the transaction.\n    isRoot && commit( record );\n}\n\nfunction begin( record : AttributesContainer ){\n    if( _begin( record ) ){\n        record._previousAttributes = new record.AttributesCopy( record.attributes );\n        record._changedAttributes = null;\n        return true;\n    }\n    \n    return false;\n}\n\nfunction markAsDirty( record : AttributesContainer, options : TransactionOptions ){\n    // Need to recalculate changed attributes, when we have nested set in change:attr handler\n    if( record._changedAttributes ){\n        record._changedAttributes = null;\n    }\n\n    return _markAsDirty( record, options );\n}\n\n/**\n * TODO: There's an opportunity to create an optimized pipeline for primitive types and Date, which makes the majority\n * of attributes. It might create the major speedup.\n * \n * Create the dedicated pipeline for owned and shared attributes as well.\n * \n * Three elements of the pipeline:\n * - from constructor\n * - from assignment\n * - from `set`\n */\n\nexport const UpdateRecordMixin = {\n// Need to override it here, since begin/end transaction brackets are overriden. \n    transaction( this : AttributesContainer, fun : ( self : AttributesContainer ) => void, options : TransactionOptions = {} ) : void{\n        const isRoot = begin( this );\n        fun.call( this, this );\n        isRoot && commit( this );\n    },\n            \n    // Handle nested changes. TODO: propagateChanges == false, same in transaction.\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void {\n        const { _ownerKey } = child,\n              attribute = this._attributes[ _ownerKey ];\n\n        if( !attribute /* TODO: Must be an opposite, likely the bug */ || attribute.propagateChanges ) this.forceAttributeChange( _ownerKey, options );\n    },\n\n    // Simulate attribute change \n    forceAttributeChange( key : string, options : TransactionOptions = {} ){\n        // Touch an attribute in bounds of transaction\n        const isRoot = begin( this );\n\n        if( markAsDirty( this, options ) ){\n            trigger3( this, 'change:' + key, this, this.attributes[ key ], options );\n        }\n        \n        isRoot && commit( this );\n    },\n\n    _createTransaction( this : AttributesContainer, a_values : {}, options : TransactionOptions = {} ) : Transaction {\n        const isRoot = begin( this ),\n                changes : string[] = [],\n                nested : RecordTransaction[]= [],\n                { _attributes } = this,\n                values = options.parse ? this.parse( a_values, options ) : a_values;\n\n        let unknown;\n\n        if( shouldBeAnObject( this, values, options ) ){\n            for( let name in values ){\n                const spec = _attributes[ name ];\n\n                if( spec ){\n                    if( spec.doUpdate( values[ name ], this, options, nested ) ){\n                        changes.push( name );\n                    }\n                }\n                else{\n                    unknown || ( unknown = [] );\n                    unknown.push( `'${ name }'` );\n                }\n            }\n\n            if( unknown ){\n                unknownAttrsWarning( this, unknown, { values }, options );\n            }\n        }\n        \n        if( changes.length && markAsDirty( this, options ) ){\n            return new RecordTransaction( this, isRoot, nested, changes );\n        }\n        \n        // No changes, but there might be silent attributes with open transactions.\n        for( let pendingTransaction of nested ){\n            pendingTransaction.commit( this );\n        }\n\n        isRoot && commit( this );\n    }\n};\n\nexport function unknownAttrsWarning( record : AttributesContainer, unknown : string[], props, options ){\n    record._log( 'warn', 'Type-R:UnknownAttrs', `undefined attributes ${ unknown.join(', ')} are ignored.`, props, options.logger );\n}\n\n// One of the main performance tricks of Type-R.\n// Create loop unrolled constructors for internal attribute hash,\n// so the hidden class JIT optimization will be engaged and they will become static structs.\n// It dramatically improves record performance.\nexport function constructorsMixin( attrDefs : AttributesDescriptors ) : ConstructorsMixin {\n    const attrs = Object.keys( attrDefs );\n\n    const AttributesCopy : AttributesCopyConstructor = new Function( 'values', `\n        ${ attrs.map( attr =>`\n            this.${ attr } = values.${ attr };\n        `).join( '' ) }\n    `) as any;\n\n    AttributesCopy.prototype = Object.prototype;\n\n    const Attributes : AttributesConstructor = new Function( 'record', 'values', 'options', `\n        var _attrs = record._attributes;\n\n        ${ attrs.map( attr =>`\n            this.${ attr } = _attrs.${ attr }.doInit( values.${ attr }, record, options );\n        `).join( '' ) }\n    `) as any;\n\n    Attributes.prototype = Object.prototype;\n\n    return { Attributes, AttributesCopy };\n}\n\nexport function shouldBeAnObject( record : AttributesContainer, values : object, options ){\n    if( values && values.constructor === Object ) return true;\n\n    record._log( 'error', 'Type-R:InvalidObject', 'update with non-object is ignored!', { values }, options.logger );\n    return false;\n}\n\n// Transaction class. Implements two-phase transactions on object's tree. \n// Transaction must be created if there are actual changes and when markIsDirty returns true. \nexport class RecordTransaction implements Transaction {\n    // open transaction\n    constructor( public object : AttributesContainer,\n                 public isRoot : boolean,\n                 public nested : Transaction[],\n                 public changes : string[] ){}\n\n    // commit transaction\n    commit( initiator? : AttributesContainer ) : void {\n        const { nested, object, changes } = this;\n\n        // Commit all pending nested transactions...\n        for( let transaction of nested ){ \n            transaction.commit( object );\n        }\n\n        // Notify listeners on attribute changes...\n        // Transaction is never created when silent option is set, so just send events out.\n        const { attributes, _isDirty } = object;\n        for( let key of changes ){\n            trigger3( object, 'change:' + key, object, attributes[ key ], _isDirty );\n        }\n\n        this.isRoot && commit( object, initiator );\n    }\n}","import { IOEndpoint } from '../../io-tools';\nimport { LogLevel, tools, Logger } from '../../object-plus';\nimport { TransactionOptions } from '../../transactions';\nimport { AttributesContainer, AttributeUpdatePipeline, RecordTransaction, setAttribute } from '../updates';\n\nconst { notEqual, assign} = tools;\n\nexport type Transform = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => any;\nexport type ChangeHandler = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => void;\n\nexport interface AttributeOptions {\n    _metatype? : typeof AnyType\n    validate? : ( record : AttributesContainer, value : any, key : string ) => any\n    isRequired? : boolean\n    changeEvents? : boolean\n\n    endpoint? : IOEndpoint\n\n    type? : Function\n    value? : any\n    hasCustomDefault? : boolean\n\n    parse? : Parse\n    toJSON? : AttributeToJSON\n   \n    getHooks? : GetHook[]\n    transforms? : Transform[]\n    changeHandlers? : ChangeHandler[]\n\n    _onChange? : ChangeAttrHandler\n}\n\nexport type Parse = ( value : any, key : string ) => any;\nexport type GetHook = ( value : any, key : string ) => any;\nexport type AttributeToJSON = ( value : any, key : string ) => any\nexport type AttributeParse = ( value : any, key : string ) => any\nexport type ChangeAttrHandler = ( ( value : any, attr : string ) => void ) | string;\n\n// TODO: interface differs from options, do something obout it\nconst emptyOptions : TransactionOptions = {};\n\n/**\n * Typeless attribute. Is the base class for all other attributes.\n */\nexport class AnyType implements AttributeUpdatePipeline {\n    // Factory method to create attribute from options \n    static create : ( options : AttributeOptions, name : string ) => AnyType;\n    \n    /**\n     * Update pipeline functions\n     * =========================\n     *\n     * Stage 0. canBeUpdated( value )\n     * - presence of this function implies attribute's ability to update in place.\n     */\n    canBeUpdated( prev, next, options : TransactionOptions ) : any {}\n\n    /**\n     * Stage 1. Transform stage\n     */\n    transform( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\n\n    // convert attribute type to `this.type`.\n    convert( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\n\n    /**\n     * Stage 2. Check if attr value is changed\n     */\n    isChanged( a : any, b : any ) : boolean {\n        return notEqual( a, b );\n    }\n\n    /**\n     * Stage 3. Handle attribute change\n     */\n    handleChange( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) {}\n\n    /**\n     * End update pipeline definitions.\n     */\n\n    // create empty object passing backbone options to constructor...\n    create() { return void 0; }\n\n    // generic clone function for typeless attributes\n    // Must be overriden in sublass\n    clone( value : any, record : AttributesContainer ) {\n        return value;\n    }\n\n    dispose( record : AttributesContainer, value : any ) : void {\n        this.handleChange( void 0, value, record, emptyOptions );\n    }\n\n    validate( record : AttributesContainer, value : any, key : string ) : any {}\n\n    toJSON( value, key, options? : object ) {\n        return value && value.toJSON ? value.toJSON( options ) : value;\n    }\n\n    createPropertyDescriptor() : PropertyDescriptor | void {\n        const { name, getHook } = this;\n\n        if( name !== 'id' ){\n            return {\n                // call to optimized set function for single argument.\n                set( value ){\n                    setAttribute( this, name, value );\n                },\n\n                // attach get hook to the getter function, if it present\n                get : (\n                    getHook ?\n                        function() {\n                            return getHook.call( this, this.attributes[ name ], name );\n                        } :\n                        function() { return this.attributes[ name ]; }\n                ),\n\n                configurable : true\n            }\n        }\n    }\n\n    value : any\n\n    // Used as global default value for the given metatype\n    static defaultValue : any;\n\n    type : Function\n\n    initialize( name : string, options : TransactionOptions ){}\n\n    options : AttributeOptions\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        const v = value === void 0 ? this.defaultValue() : value,\n            x = this.transform( v, void 0, record, options );\n            \n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : RecordTransaction[] ){\n        const { name } = this,\n            { attributes } = record,\n              prev = attributes[ name ];\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ name ] = next;\n\n        if( this.isChanged( next, prev ) ) {\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n            return true;\n        }\n\n        return false;\n    }\n\n    propagateChanges : boolean\n\n    protected _log( level : LogLevel, code : string, text : string, value, record : AttributesContainer, logger : Logger ){\n        record._log( level, code, `${record.getClassName()}.${ this.name } ${ text }`, {\n            'New value' : value,\n            'Prev. value' : record.attributes[ this.name ]\n        }, logger );\n    }\n\n    defaultValue(){\n        return this.value;\n    }\n\n    constructor( public name : string, a_options : AttributeOptions ) {        \n        // Save original options...\n        this.options = a_options;\n\n        // Clone options.\n        const options : AttributeOptions = assign( { getHooks : [], transforms : [], changeHandlers : [] }, a_options );\n        options.getHooks = options.getHooks.slice();\n        options.transforms = options.transforms.slice();\n        options.changeHandlers = options.changeHandlers.slice();\n\n        const {\n                  value, type, parse, toJSON, changeEvents,\n                  validate, getHooks, transforms, changeHandlers\n              } = options;\n\n        // Initialize default value...\n        this.value = value;\n        this.type  = type;\n\n        // TODO: An opportunity to optimize for attribute subtype.\n        if( !options.hasCustomDefault && type ){\n            this.defaultValue = this.create;\n        }\n        else if( tools.isValidJSON( value ) ){ \n            // JSON literals must be deep copied.\n            this.defaultValue = new Function( `return ${ JSON.stringify( value ) };` ) as any;\n        }\n        else{\n            this.defaultValue = this.defaultValue;\n        }\n\n        // Changes must be bubbled when they are not disabled for an attribute and transactional object.\n        this.propagateChanges = changeEvents !== false;\n\n        this.toJSON = toJSON === void 0 ? this.toJSON : toJSON;\n\n        this.validate = validate || this.validate;\n        \n        if( options.isRequired ){\n            this.validate = wrapIsRequired( this.validate );\n        }\n\n        /**\n         * Assemble pipelines...\n         */\n\n        // `convert` is default transform, which is always present...\n        transforms.unshift( this.convert );\n\n        // Get hook from the attribute will be used first...\n        if( this.get ) getHooks.unshift( this.get );\n\n        // let subclasses configure the pipeline...\n        this.initialize.call( this, options );\n\n        // let attribute spec configure the pipeline...\n        if( getHooks.length ){\n            const getHook = this.getHook = getHooks.reduce( chainGetHooks );\n\n            const { validate } = this;\n            this.validate = function( record : AttributesContainer, value : any, key : string ){\n                return validate.call( this, record, getHook.call( record, value, key ), key );\n            }\n        }\n        \n        this.transform = transforms.length ? transforms.reduce( chainTransforms ) : this.transform;\n        \n        this.handleChange = changeHandlers.length ? changeHandlers.reduce( chainChangeHandlers ) : this.handleChange;\n\n        // Attribute-level parse transform are attached as update hooks modifiers...\n        const { doInit, doUpdate } = this;\n        this.doInit = parse ? function( value, record : AttributesContainer, options : TransactionOptions ){\n            return doInit.call( this, options.parse && value !== void 0 ? parse.call( record, value, this.name ) : value, record, options );\n        } : doInit;\n\n        this.doUpdate = parse ? function( value, record : AttributesContainer, options : TransactionOptions, nested? : RecordTransaction[] ){\n            return doUpdate.call( this, options.parse && value !== void 0 ? parse.call( record, value, this.name ) : value, record, options, nested );\n        } : doUpdate;\n    }\n\n    getHook : ( value, key : string ) => any = null\n    get : ( value, key : string ) => any\n}\n\n\nfunction chainGetHooks( prevHook : GetHook, nextHook : GetHook ) : GetHook {\n    return function( value, name ) {\n        return nextHook.call( this, prevHook.call( this, value, name ), name );\n    }\n}\n\nfunction chainTransforms( prevTransform : Transform, nextTransform : Transform ) : Transform {\n    return function( next, prev, record, options ) {\n        return nextTransform.call( this, prevTransform.call( this, next, prev, record, options ), prev, record, options );\n    }\n}\n\nfunction chainChangeHandlers( prevHandler : ChangeHandler, nextHandler : ChangeHandler ) : ChangeHandler {\n    return function( next, prev, record, options ) {\n        prevHandler.call( this, next, prev, record, options );\n        nextHandler.call( this, next, prev, record, options );\n    }\n}\n\nfunction wrapIsRequired( validate ){\n    return function( record : AttributesContainer, value : any, key : string ){\n        return value ? validate.call( this, record, value, key ) : 'Required';\n    }\n}","/**\n * Built-in JSON types attributes: Object, Array, Number, String, Boolean, and immutable class.\n * \n * Adds type assertions, default validation, and optimized update pipeline.\n */\n\nimport { TransactionOptions } from '../../transactions';\nimport { AnyType } from './any';\nimport { AttributesContainer } from '../updates';\n\n/**\n * Custom class must be immutable class which implements toJSON() method\n * with a constructor taking json.\n */\nexport class ImmutableClassType extends AnyType {\n    type : new ( value? : any ) => {}\n\n    create(){\n        return new this.type();\n    }\n\n    convert( next : any ) : any {\n        return next == null || next instanceof this.type ? next : new this.type( next );\n    }\n\n    toJSON( value, key? : string, options? : object ){\n        return value && value.toJSON ? value.toJSON( options ) : value;\n    }\n\n    clone( value ) {\n        return new this.type( this.toJSON( value ) );\n    }\n\n    isChanged( a, b ){\n        return a !== b;\n    }\n}\n\n/**\n * Optimized attribute of primitive type.\n * \n * Primitives has specialized simplified pipeline.\n */\nexport class PrimitiveType extends AnyType {\n    type : NumberConstructor | StringConstructor | BooleanConstructor\n\n    dispose(){}\n    create() { return this.type(); }\n\n    toJSON( value ) { return value; }\n\n    convert( next ) { return next == null ? next : this.type( next ); }\n\n    isChanged( a, b ) { return a !== b; }\n\n    clone( value ) { return value; }\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        return this.transform( value === void 0 ? this.value : value, void 0, record, options );\n    }\n\n    doUpdate( value, record, options, nested ){\n        const   { name } = this,\n                { attributes } = record,\n                prev = attributes[ name ];\n        \n        return prev !== ( attributes[ name ] = this.transform( value, prev, record, options ) );\n    }\n\n    initialize(){\n        if( !this.options.hasCustomDefault ){\n            this.value = this.type();\n        }\n    }\n}\n\n// Number type with special validation algothim.\n/** @private */ \nexport class NumericType extends PrimitiveType {\n    type : NumberConstructor\n\n    create(){\n        return 0;\n    }\n\n    convert( next, prev?, record?, options? ) {\n        const num = next == null ? next : this.type( next );\n\n        if( num !== num ){\n            this._log( 'error', 'Type-R:InvalidNumber', 'Number attribute is assigned with an invalid number', next, record, options.logger );\n        }\n        \n        return num;\n    }\n\n    validate( model, value, name ) {\n        // Whatever is not symmetrically serializable to JSON, is not valid by default.\n        if( value != null && !isFinite( value ) ) {\n            return name + ' is not valid number';\n        }\n    }\n}\n\n/**\n * Compatibility wrapper for Array type.\n * @private\n */ \nexport class ArrayType extends AnyType {\n    toJSON( value ) { return value; }\n    dispose(){}\n    create(){ return []; }\n\n    convert( next, prev, record, options ) {\n        // Fix incompatible constructor behaviour of Array...\n        if( next == null || Array.isArray( next ) ) return next;\n\n        this._log( 'error', 'Type-R:InvalidArray', 'Array attribute assigned with non-array value', next, record, options.logger );\n\n        return [];\n    }\n\n    clone( value ){\n        return value && value.slice();\n    }\n}\n\nexport class ObjectType extends AnyType {\n    create(){ return {}; }\n\n    convert( next, prev, record, options ) {\n        if( next == null || typeof next === 'object' ) return next;\n                \n        this._log( 'error', 'Type-R:InvalidObject', 'Object attribute is assigned with non-object value', next, record, options.logger );\n        return {};\n    }\n}\n\nexport function doNothing(){}\n\nexport class FunctionType extends AnyType {\n    // Functions are not serialized.\n    toJSON( value ) { return void 0; }\n    create(){ return doNothing; }\n    dispose(){}\n\n    convert( next, prev, record, options ) {\n        // Fix incompatible constructor behaviour of Function...\n        if( next == null || typeof next === 'function' ) return next;\n\n        this._log( 'error', 'Type-R:InvalidFunction', 'Function attribute assigned with non-function value', next, record, options.logger );\n\n        return doNothing;\n    }\n\n    // Functions are not cloned.\n    clone( value ){ return value; }\n}\n","/**\n * Date attribute type.\n * \n * Implements validation, cross-browser compatibility fixes, variety of Date serialization formats,\n * and optimized update pipeline.\n */\nimport { TransactionOptions } from '../../transactions';\nimport { AnyType } from './any';\nimport { AttributesContainer } from '../updates';\n\n// Date Attribute\n/** @private */\nexport class DateType extends AnyType {\n    create(){\n        return new Date();\n    }\n    \n    convert( next : any, a, record, options ){\n        if( next == null || next instanceof Date ) return next;\n\n        const date = new Date( next ),\n              timestamp = date.getTime();\n\n        if( timestamp !== timestamp ){\n            this._log( 'error', 'Type-R:InvalidDate', 'Date attribute assigned with invalid date', next, record, options.logger );\n        }\n\n        return date;\n    }\n\n    validate( model, value, name ) {\n        if( value != null ){\n            const timestamp = value.getTime(); \n            if( timestamp !== timestamp ) return name + ' is Invalid Date';\n        }\n    }\n\n    toJSON( value ) { return value && value.toISOString(); }\n\n    isChanged( a, b ) { return ( a && a.getTime() ) !== ( b && b.getTime() ); }\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        // Date don't have handleChanges step.\n        return this.transform( value === void 0 ? this.defaultValue() : value, void 0, record, options );\n    }\n\n    doUpdate( value, record, options, nested ){\n        const   { name } = this,\n                { attributes } = record,\n                prev = attributes[ name ];\n        \n        // Date don't have handleChanges step.\n        return this.isChanged( prev , attributes[ name ] = this.transform( value, prev, record, options ) );\n    }\n\n    clone( value ) { return value && new Date( value.getTime() ); }\n    dispose(){}\n}\n\n// If ISO date is not supported by date constructor (such as in Safari), polyfill it.\nfunction supportsDate( date ){\n    return !isNaN( ( new Date( date ) ).getTime() );\n}\n\nif( !supportsDate('2011-11-29T15:52:30.5') ||\n    !supportsDate('2011-11-29T15:52:30.52') ||\n    !supportsDate('2011-11-29T15:52:18.867') ||\n    !supportsDate('2011-11-29T15:52:18.867Z') ||\n    !supportsDate('2011-11-29T15:52:18.867-03:30') ){\n\n    DateType.prototype.convert = function( value ){\n        return value == null || value instanceof Date ? value : new Date( safeParseDate( value ) );\n    }\n}\n\nconst numericKeys    = [ 1, 4, 5, 6, 7, 10, 11 ],\n      isoDatePattern = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\n\nfunction safeParseDate( date : string ) : number {\n    var timestamp, struct : any[], minutesOffset = 0;\n\n    if( ( struct = isoDatePattern.exec( date )) ) {\n        // avoid NaN timestamps caused by undefined values being passed to Date.UTC\n        for( var i = 0, k; ( k = numericKeys[ i ] ); ++i ) {\n            struct[ k ] = +struct[ k ] || 0;\n        }\n\n        // allow undefined days and months\n        struct[ 2 ] = (+struct[ 2 ] || 1) - 1;\n        struct[ 3 ] = +struct[ 3 ] || 1;\n\n        if( struct[ 8 ] !== 'Z' && struct[ 9 ] !== undefined ) {\n            minutesOffset = struct[ 10 ] * 60 + struct[ 11 ];\n\n            if( struct[ 9 ] === '+' ) {\n                minutesOffset = 0 - minutesOffset;\n            }\n        }\n\n        timestamp =\n            Date.UTC( struct[ 1 ], struct[ 2 ], struct[ 3 ], struct[ 4 ], struct[ 5 ] + minutesOffset, struct[ 6 ],\n                    struct[ 7 ] );\n    }\n    else {\n        timestamp = Date.parse( date );\n    }\n\n    return timestamp;\n}","import { ItemsBehavior, Transactional, transactionApi, TransactionOptions } from '../../transactions';\nimport { ValidationError } from '../../validation';\nimport { AnyType } from './any';\nimport { AttributesContainer, ConstructorOptions } from '../updates';\n\nconst { free, aquire } = transactionApi;\n\nexport class AggregatedType extends AnyType {\n    type : typeof Transactional\n\n    clone( value : Transactional ) : Transactional {\n        return value ? value.clone() : value;\n    }\n\n    toJSON( x, key : string, options : object ){ return x && x.toJSON( options ); }\n\n    doInit( value, record : AttributesContainer, options : ConstructorOptions ){\n        const v = options.clone ? this.clone( value ) : (\n            value === void 0 ? this.defaultValue() : value\n        );\n\n        const x = this.transform( v, void 0, record, options );\n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\n        const key = this.name, { attributes } = record; \n        const prev = attributes[ key ];\n        let update;\n\n        // This can be moved to transactional attribute. And chained with the rest.\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\n            const nestedTransaction = prev._createTransaction( update, options );\n            if( nestedTransaction ){\n                if( nested ){\n                    nested.push( nestedTransaction );\n                }\n                else{\n                    nestedTransaction.commit( record );\n                }\n\n                if( this.propagateChanges ) return true;\n            }\n\n            return false;\n        }\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ key ] = next;\n\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n\n            return true;\n        }\n\n        return false;\n    }\n\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\n        if( prev && next != null ){\n            if( next instanceof this.type ){\n                // In case if merge option explicitly specified, force merge.\n                if( options.merge ) return next.__inner_state__;\n            }\n            else{\n                return next;\n            }\n        }\n    }\n\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\n        // Invoke class factory to handle abstract classes\n        if( next == null ) return next;\n        \n        if( next instanceof this.type ){\n            if( next._shared && !( next._shared & ItemsBehavior.persistent ) ) { // TODO: think more about shared types assignment compatibility. \n                this._log( 'error', 'Type-R:InvalidCollection', 'aggregated collection attribute is assigned with shared collection type', next, record, options.logger );\n            }\n\n            // With explicit 'merge' option we need to clone an object if its previous value was 'null'.\n            // This is an only case we could be here when merge === true.\n            return options.merge ? next.clone() : next;\n        }\n\n        return <any>this.type.create( next, options );\n    }\n\n    dispose ( record : AttributesContainer, value : Transactional ){\n        if( value ){\n            this.handleChange( void 0, value, record, {} );\n        }\n    }\n\n    validate( record : AttributesContainer, value : Transactional ) : ValidationError {\n        var error = value && value.validationError;\n        if( error ) return error;\n    }\n\n    create() : Transactional {\n        return (<any>this.type).create(); // this the subclass of Transactional here.\n    }\n\n    initialize( options ){\n        options.changeHandlers.unshift( this._handleChange );\n    }\n\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options : TransactionOptions ){\n        if( prev ){\n            free( record, prev );\n            options.unset || prev.dispose();\n        } \n        \n        if( next && !aquire( record, next, this.name ) ){\n            this._log( 'error', 'Type-R:InvalidOwner', 'aggregated attribute assigned with an object already having an owner', next, record, options.logger );\n        }\n    }\n}","import { eventsApi } from '../../object-plus';\nimport { ItemsBehavior, Transactional, transactionApi, TransactionOptions } from '../../transactions';\nimport { AnyType } from './any';\nimport { AttributesContainer, ConstructorOptions } from '../updates';\n\nconst { on, off } = eventsApi,\n    { free, aquire } = transactionApi;\n\n/************************\n * Shared attribute definition.\n * - Not serialized.\n * - Listening to the changes.\n * - Doesn't take ownership when assigned with object of proper type.\n * - Takes ownership on objects which are converted.\n */\n\nconst shareAndListen = ItemsBehavior.listen | ItemsBehavior.share;\n\n/** @private */\nexport class SharedType extends AnyType {\n    type : typeof Transactional\n\n     doInit( value, record : AttributesContainer, options : ConstructorOptions ){\n        const v = options.clone ? this.clone( value, record ) : (\n            value === void 0 ? this.defaultValue() : value\n        );\n\n        const x = this.transform( v, void 0, record, options );\n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\n        const key = this.name, { attributes } = record; \n        const prev = attributes[ key ];\n        let update;\n\n        // This can be moved to transactional attribute. And chained with the rest.\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\n            const nestedTransaction = prev._createTransaction( update, options );\n            if( nestedTransaction ){\n                if( nested ){\n                    nested.push( nestedTransaction );\n                }\n                else{\n                    nestedTransaction.commit( record );\n                }\n\n                if( this.propagateChanges ) return true;\n            }\n\n            return false;\n        }\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ key ] = next;\n\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n\n            return true;\n        }\n\n        return false;\n    }\n\n    clone( value : Transactional, record : AttributesContainer ) : Transactional {\n        // References are not cloned.\n        if( !value || value._owner !== record ) return value;\n\n        // Implicitly created objects are cloned.\n        const clone = value.clone();\n        aquire( record, clone, this.name );\n        return clone;\n    }\n\n    // Do not serialize by default.\n    toJSON(){}\n\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\n        if( prev && next != null && !( next instanceof this.type ) ){\n            return next;\n        }\n    }\n\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\n        if( next == null || next instanceof this.type ) return next;\n\n        // Convert type using implicitly created rtransactional object.\n        const implicitObject = new ( this.type as any )( next, options, shareAndListen );\n\n        // To prevent a leak, we need to take an ownership on it.\n        aquire( record, implicitObject, this.name );\n\n        return implicitObject;\n    }\n\n    // Refs are always valid.\n    validate( model, value, name ){}\n\n    // They are always created as null.\n    create() : Transactional {\n        return null;\n    }\n\n    // Listening to the change events\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options ){\n        if( prev ){\n            // If there was an implicitly created object, remove an ownership.\n            if( prev._owner === record ){\n                free( record, prev );\n                options.unset || prev.dispose();\n            }\n            else{\n                off( prev, prev._changeEventName, this._onChange, record );\n            }\n        }  \n \n        if( next ){\n            // No need to take an ownership for an implicit object - already done in convert or clone.\n            if( next._owner !== record ){\n                on( next, next._changeEventName, this._onChange, record );\n            }\n        } \n    }\n\n    dispose( record : AttributesContainer, value : Transactional ){\n        if( value ){\n            this.handleChange( void 0, value, record, {} );\n        }\n    }\n\n    _onChange : ( child : Transactional, options : TransactionOptions, initiator : Transactional ) => void \n\n    initialize( options ){\n        // Create change event handler which knows current attribute name. \n        const attribute = this;\n        this._onChange = this.propagateChanges ? function( child, options, initiator ){\n            this === initiator || this.forceAttributeChange( attribute.name, options );\n        } : ignore;\n\n        options.changeHandlers.unshift( this._handleChange );\n    }\n}\n\nfunction ignore(){}","import { PrimitiveType, NumericType, ObjectType, ImmutableClassType, FunctionType, ArrayType } from './basic';\nimport { DateType } from './date';\nimport { AnyType, AttributeOptions } from './any';\n\nexport * from './any';\nexport * from './basic';\nexport * from './date';\nexport * from './owned';\nexport * from './shared';\n\n/**\n * Every record attribute type has the corresponding metatype controlling its behavior.\n * For built-in types, Type-R uses the predefined list to resolve metatype in order to avoid global objects modifications.\n * For user-defined types, static `_metatype` constructor member is used.\n */\n\nconst builtins : Function[] = [ String, Number, Boolean, Date, Object, Array, Function ],\n      metatypes = [ PrimitiveType, NumericType, PrimitiveType, DateType, ObjectType, ArrayType, FunctionType ];\n\nexport function getMetatype( Ctor : Function ){\n    return ( Ctor as any )._metatype || resolveBuiltins( Ctor );\n}\n\nAnyType.create = ( options : AttributeOptions, name : string ) => {\n    const type = options.type,\n          AttributeCtor = options._metatype || ( type ? getMetatype( type ): AnyType );\n\n    return new AttributeCtor( name, options );\n}\n\nfunction resolveBuiltins( Ctor : Function ){\n    const idx = builtins.indexOf( Ctor );\n    return idx < 0 ? ImmutableClassType : metatypes[ idx ];\n}","/**\n * Type spec engine. Declare attributes using chainable syntax,\n * and returns object with spec.\n */\nimport { IOEndpoint } from '../io-tools';\nimport { definitionDecorator, EventMap, EventsDefinition, tools } from '../object-plus';\nimport { Transactional } from '../transactions';\nimport { AttributeOptions, Parse, AnyType, getMetatype } from './metatypes';\nimport { AttributesContainer } from './updates';\n\nconst { assign } = tools;\n\nexport interface AttributeCheck {\n    ( value : any, key : string ) : boolean\n    error? : any\n}\n\nexport class ChainableAttributeSpec {\n    options : AttributeOptions;\n\n    constructor( options : AttributeOptions ) {\n        // Shallow copy options, fill it with defaults.\n        this.options = { getHooks : [], transforms : [], changeHandlers : []};\n        if( options ) assign( this.options, options );\n    }\n\n    check( check : AttributeCheck, error? : any ) : ChainableAttributeSpec {\n        function validate( model, value, name ){\n            if( !check.call( model, value, name ) ){\n                const msg = error || check.error || name + ' is not valid';\n                return typeof msg === 'function' ? msg.call( model, name ) : msg;\n            }\n        }\n\n        const prev = this.options.validate;\n\n        return this.metadata({\n            validate : prev ? (\n                            function( model, value, name ){\n                                return prev( model, value, name ) || validate( model, value, name );\n                            }\n                       ) : validate\n        });\n    }\n\n    get asProp(){\n        return definitionDecorator( 'attributes', this );\n    }\n\n    get as(){ return this.asProp; }\n\n    get isRequired() : ChainableAttributeSpec {\n        return this.required;\n    }\n\n    get required() : ChainableAttributeSpec {\n        return this.metadata({ isRequired : true }); \n    }\n\n    endpoint( endpoint : IOEndpoint ){\n        return this.metadata({ endpoint });\n    }\n\n    watcher( ref : string | ( ( value : any, key : string ) => void ) ) : ChainableAttributeSpec {\n        return this.metadata({ _onChange : ref });\n    }\n\n    // Attribute-specific parse transform\n    parse( fun : Parse ) : ChainableAttributeSpec {\n        return this.metadata({ parse : fun });\n    }\n\n    toJSON( fun ) : ChainableAttributeSpec {\n        return this.metadata({\n            toJSON : typeof fun === 'function' ? fun : ( fun ? ( x, k, o ) => x && x.toJSON( o ) : emptyFunction ) \n        });\n    }\n\n    // Attribute get hook.\n    get( fun ) : ChainableAttributeSpec {\n        return this.metadata({\n            getHooks : this.options.getHooks.concat( fun )\n        });\n    }\n\n    // Attribute set hook.\n    set( fun ) : ChainableAttributeSpec {\n        function handleSetHook( next, prev, record : AttributesContainer, options ) {\n            if( this.isChanged( next, prev ) ) {\n                const changed = fun.call( record, next, this.name );\n                return changed === void 0 ? prev : this.convert( changed, prev, record, options );\n            }\n\n            return prev;\n        }\n\n        return this.metadata({\n            transforms : this.options.transforms.concat( handleSetHook )\n        });\n    }\n\n    changeEvents( events : boolean ) : ChainableAttributeSpec {\n        return this.metadata({ changeEvents : events });\n    }\n\n    // Subsribe to events from an attribute.\n    events( map : EventsDefinition ) : ChainableAttributeSpec {\n        const eventMap = new EventMap( map );\n\n        function handleEventsSubscribtion( next, prev, record : AttributesContainer ){\n            prev && prev.trigger && eventMap.unsubscribe( record, prev );\n\n            next && next.trigger && eventMap.subscribe( record, next );\n        }\n\n        return this.metadata({\n            changeHandlers : this.options.changeHandlers.concat( handleEventsSubscribtion )\n        });\n    }\n\n    // Creates a copy of the spec.\n    get has() : ChainableAttributeSpec {\n        return this;\n    }\n\n    metadata( options : AttributeOptions ) : ChainableAttributeSpec {\n        const cloned = new ChainableAttributeSpec( this.options );\n        assign( cloned.options, options );\n        return cloned;\n    }\n\n    value( x ) : ChainableAttributeSpec {\n        return this.metadata({ value : x, hasCustomDefault : true });\n    }\n\n    static from( spec : any ) : ChainableAttributeSpec {\n        let attrSpec : ChainableAttributeSpec;\n\n        if( typeof spec === 'function' ) {\n            attrSpec = type( spec );\n        }\n        else if( spec && spec instanceof ChainableAttributeSpec ) {\n            attrSpec = spec;\n        }\n        else{\n            // Infer type from value.\n            const type = inferType( spec );\n    \n            // Transactional types inferred from values must have shared type. \n            if( type && type.prototype instanceof Transactional ){\n                attrSpec = type( ( type as typeof Transactional ).shared ).value( spec );\n            }\n            // All others will be created in regular way.\n            else{\n                attrSpec = new ChainableAttributeSpec({ type : type, value : spec, hasCustomDefault : true });\n            }\n        }\n    \n        return attrSpec;\n    }\n}\n\nfunction emptyFunction(){}\n\nexport function type( this : void, type : ChainableAttributeSpec | Function ) : ChainableAttributeSpec {\n    if( type instanceof ChainableAttributeSpec ) return type;\n\n    const { defaultValue } = getMetatype( type );\n    return new ChainableAttributeSpec( {\n        type,\n        value : defaultValue,\n        hasCustomDefault : defaultValue !== void 0\n    } );\n}\n\nfunction inferType( value : {} ) : Function {\n    switch( typeof value ) {\n        case 'number' :\n            return Number;\n        case 'string' :\n            return String;\n        case 'boolean' :\n            return Boolean;\n        case 'undefined' :\n            return void 0;\n        case 'object' :\n            return value ? <any> value.constructor : void 0;\n    }\n}\n\nexport function createSharedTypeSpec( Constructor : Function, Attribute : typeof AnyType ){\n    if( !Constructor.hasOwnProperty( 'shared' ) ){\n        Object.defineProperty( Constructor, 'shared', {\n            get(){\n                return new ChainableAttributeSpec({\n                    value : null,\n                    type : Constructor,\n                    _metatype : Attribute\n                });\n            }\n        });\n    }\n}","import { IOEndpoint } from '../io-tools';\nimport { eventsApi, tools as _ } from '../object-plus';\nimport { CompiledReference } from '../traversable';\nimport { ChainableAttributeSpec } from './attrDef';\nimport { AnyType } from './metatypes';\nimport { ConstructorsMixin, constructorsMixin } from './updates';\n\nexport interface RecordAttributesMixin extends ConstructorsMixin {\n    // Attributes descriptors\n    _attributes : AttributeDescriptors\n    _attributesArray : AnyType[]\n    \n    // Attribute's property descriptors\n    properties : PropertyDescriptorMap\n\n    // Event map for record's local events.\n    _localEvents? : eventsApi.EventMap,\n\n    _endpoints : { [ name : string ] : IOEndpoint }\n}\n\nexport interface AttributeDescriptors {\n    [ name : string ] : AnyType\n}\n\n// Create attribute from the type spec.\nexport function createAttribute( spec : any, name : string ) : AnyType {\n    return AnyType.create( ChainableAttributeSpec.from( spec ).options, name );\n}\n\n// Create record mixin from the given record's attributes definition\nexport function createAttributesMixin( attributesDefinition : object, baseClassAttributes : AttributeDescriptors ) : RecordAttributesMixin {\n    const myAttributes = _.transform( {} as AttributeDescriptors, attributesDefinition, createAttribute ),\n          allAttributes = _.defaults( {} as AttributeDescriptors, myAttributes, baseClassAttributes );\n\n    const ConstructorsMixin = constructorsMixin( allAttributes );\n\n    return {\n        ...ConstructorsMixin,\n        _attributes : new ConstructorsMixin.AttributesCopy( allAttributes ),\n        _attributesArray : Object.keys( allAttributes ).map( key => allAttributes[ key ] ),\n        properties : _.transform( <PropertyDescriptorMap>{}, myAttributes, x => x.createPropertyDescriptor() ),\n        ...localEventsMixin( myAttributes ),\n        _endpoints : _.transform( {}, allAttributes, attrDef => attrDef.options.endpoint )\n    }            \n}\n\ninterface LocalEventsMixin {\n    _localEvents? : eventsApi.EventMap\n}\n\nfunction localEventsMixin( attrSpecs : AttributeDescriptors ) : LocalEventsMixin {\n    let _localEvents : eventsApi.EventMap;\n\n    for( var key in attrSpecs ){\n        const attribute = attrSpecs[ key ],\n            { _onChange } = attribute.options; \n\n        if( _onChange ){\n            _localEvents || ( _localEvents = new eventsApi.EventMap() );\n\n            _localEvents.addEvent( 'change:' + key,\n                typeof _onChange === 'string' ?\n                    createWatcherFromRef( _onChange, key ) : \n                    wrapWatcher( _onChange, key ) );\n        }\n    }\n\n    return _localEvents ? { _localEvents } : {};\n}\n\nfunction wrapWatcher( watcher, key ){\n    return function( record, value ){\n        watcher.call( record, value, key );\n    } \n}\n\nfunction createWatcherFromRef( ref : string, key : string ){\n    const { local, resolve, tail } = new CompiledReference( ref, true );\n    return local ?\n        function( record, value ){\n            record[ tail ]( value, key );\n        } :\n        function( record, value ){\n            resolve( record )[ tail ]( value, key );\n        }\n}","import { IOEndpoint, IONode, IOOptions, IOPromise, startIO } from '../io-tools';\n\nexport interface IORecord extends IONode {\n    getEndpoint() : IOEndpoint\n    save( options? : IOOptions ) : IOPromise<this>\n    fetch( options? : IOOptions ) : IOPromise<this>\n    destroy( options? : IOOptions ) : IOPromise<this>\n    toJSON( options? : object ) : any\n    isNew() : boolean\n    id : string | number\n    set( json : object, options : object )\n}\n\nexport const IORecordMixin = {\n    save( this : IORecord, options : IOOptions = {} ){\n        const endpoint = this.getEndpoint(),\n              json = this.toJSON( options );\n\n        return startIO(\n            this,\n            this.isNew() ?\n                endpoint.create( json, options, this ) :\n                endpoint.update( this.id, json, options, this ),\n            options,\n\n            update => {\n                this.set( update, { parse : true, ...options } );\n            }\n        );\n    },\n\n    fetch( options : IOOptions = {} ){\n        return startIO(\n            this,\n            this.getEndpoint().read( this.id, options, this ),\n            options,\n\n            json => this.set( json, { parse : true, ...options } )\n        );\n    },\n\n    destroy( options : IOOptions = {} ){  \n        return startIO(\n            this,\n            this.getEndpoint().destroy( this.id, options, this ),\n            options,\n\n            () => {\n                const { collection } = this;\n                if( collection ){\n                    collection.remove( this, options );\n                }\n                else{\n                    this.dispose();\n                }\n\n                return this;\n            }\n        )\n    }\n}","/**\n * Record core implementing transactional updates.\n * The root of all definitions. \n */\n\nimport { Collection } from '../collection';\nimport { IOEndpoint, IOPromise } from '../io-tools';\nimport { define, definitions, isProduction, Logger, logger, LogLevel, mixinRules, tools } from '../object-plus';\nimport { CloneOptions, Owner, Transaction, Transactional, TransactionalDefinition, TransactionOptions } from '../transactions';\nimport { ChildrenErrors } from '../validation';\nimport { AggregatedType, AnyType } from './metatypes';\nimport { IORecord, IORecordMixin } from './io-mixin';\nimport { AttributesConstructor, AttributesContainer, AttributesCopyConstructor, AttributesValues, setAttribute, shouldBeAnObject, unknownAttrsWarning, UpdateRecordMixin } from './updates';\n\n\nconst { assign, isEmpty } = tools;\n\n/*******************************************************\n * Record core implementation\n */\n\nexport interface ConstructorOptions extends TransactionOptions{\n    clone? : boolean\n}\n\n// Client unique id counter\nlet _cidCounter : number = 0;\n\n/***************************************************************\n * Record Definition as accepted by Record.define( definition )\n */\nexport interface RecordDefinition extends TransactionalDefinition {\n    idAttribute? : string\n    attributes? : AttributesValues\n    collection? : object\n    Collection? : typeof Transactional\n}\n\n@define({\n    // Default client id prefix \n    cidPrefix : 'm',\n\n    // Name of the change event\n    _changeEventName : 'change',\n\n    // Default id attribute name\n    idAttribute : 'id'\n})\n@definitions({\n    defaults : mixinRules.merge,\n    attributes : mixinRules.merge,\n    collection : mixinRules.merge,\n    Collection : mixinRules.value,\n    idAttribute : mixinRules.protoValue\n})\nexport class Record extends Transactional implements IORecord, AttributesContainer, Iterable<any> {\n    static _metatype = AggregatedType;\n\n    // Hack\n    static onDefine( definition, BaseClass ){}\n\n    static Collection : typeof Collection;\n    static DefaultCollection : typeof Collection;\n\n    static from : ( collectionReference : any ) => any;\n    \n    static defaults( attrs : AttributesValues ) : typeof Record {\n        return <any>this.extend({ attributes : attrs });\n    }\n    \n    static attributes : AttributesValues\n\n    /********************\n     * IO Methods\n     */\n     _endpoints : { [ name : string ] : IOEndpoint }\n\n     // Save record\n     save( options? : object ) : IOPromise<this> { throw new Error( 'Implemented by mixin' ); }\n\n     // Destroy record\n     destroy( options? : object ) : IOPromise<this> { throw new Error( 'Implemented by mixin' ); }\n\n    /***********************************\n     * Core Members\n     */\n    // Previous attributes\n    _previousAttributes : {}\n\n    previousAttributes(){ return new this.AttributesCopy( this._previousAttributes ); } \n\n    // Current attributes    \n    attributes : AttributesValues\n\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\n    get __inner_state__(){ return this.attributes; }\n\n    // Lazily evaluated changed attributes hash\n    _changedAttributes : AttributesValues\n\n    get changed(){\n        let changed = this._changedAttributes;\n\n        if( !changed ){\n            const prev = this._previousAttributes;\n            changed = {};\n\n            const { attributes } = this;\n\n            for( let attr of this._attributesArray ){\n                const key = attr.name,\n                    value = attributes[ key ];\n\n                if( attr.isChanged( value, prev[ key ] ) ){\n                    changed[ key ] = value;\n                }\n            }\n\n            this._changedAttributes = changed;\n        }\n\n        return changed;    \n    }\n\n    changedAttributes( diff? : {} ) : boolean | {} {\n        if( !diff ) return this.hasChanged() ? assign( {}, this.changed ) : false;\n\n        var val, changed : {} | boolean = false,\n            old          = this._transaction ? this._previousAttributes : this.attributes,\n            attrSpecs    = this._attributes;\n\n        for( var attr in diff ){\n            if( !attrSpecs[ attr ].isChanged( old[ attr ], ( val = diff[ attr ] ) ) ) continue;\n            (changed || (changed = {}))[ attr ] = val;\n        }\n\n        return changed;        \n    }\n\n    hasChanged( key? : string ) : boolean {\n        const { _previousAttributes } = this;\n        if( !_previousAttributes ) return false;\n\n        return key ?\n                this._attributes[ key ].isChanged( this.attributes[ key ], _previousAttributes[ key ] ) :\n                !isEmpty( this.changed );\n    }\n\n    previous( key : string ) : any {\n        if( key ){\n            const { _previousAttributes } = this;\n            if( _previousAttributes ) return _previousAttributes[ key ];\n        }\n        \n        return null;\n    }\n\n    isNew() : boolean {\n        return this.id == null;\n    }\n\n    has( key : string ) : boolean {\n        return this[ key ] != void 0;\n    }\n\n    // Return attribute value, setting an attribute to undefined.\n    // TODO: If attribute was aggregated, don't dispose it.\n    unset( key : string, options? ) : any {\n        const value = this[ key ];\n        this.set({ [ key ] : void 0 }, { unset : true, ...options });\n        return value;\n    }\n\n    // Undocumented. Move to NestedTypes?\n    clear( options? ) : this {\n        const nullify = options && options.nullify;\n\n        this.transaction( () =>{\n            this.forEach( ( value, key ) => this[ key ] = nullify ? null : void 0 );\n        }, options );\n\n        return this;\n    }\n\n    // Returns Record owner skipping collections. TODO: Move out\n    getOwner() : Owner {\n        const owner : any = this._owner;\n\n        // If there are no key, owner must be transactional object, and it's the collection.\n        // We don't expect that collection can be the member of collection, so we're skipping just one level up. An optimization.\n        return this._ownerKey ? owner : owner && owner._owner;\n    }\n\n    /***********************************\n     * Identity managements\n     */\n\n    // Id attribute name ('id' by default)\n    idAttribute : string;\n\n    // Fixed 'id' property pointing to id attribute\n    get id() : string | number { return this.attributes[ this.idAttribute ]; }\n    set id( x : string | number ){ setAttribute( this, this.idAttribute, x ); }\n\n    /***********************************\n     * Dynamically compiled stuff\n     */\n\n    // Attributes specifications \n    _attributes : { [ key : string ] : AnyType }\n    _attributesArray : AnyType[]\n\n    // Attributes object copy constructor\n    Attributes : AttributesConstructor\n    AttributesCopy : AttributesCopyConstructor\n\n    // Create record default values, optionally augmenting given values.\n    defaults( values = {} ){\n        const defaults = {},\n            { _attributesArray } = this;\n\n        for( let attr of _attributesArray ){\n            const key = attr.name,\n            value = values[ key ];\n\n            defaults[ key ] = value === void 0 ? attr.defaultValue() : value;\n        }\n\n        return defaults;\n    }\n\n    /***************************************************\n     * Record construction\n     */\n    // Create record, optionally setting an owner\n    constructor( a_values? : {}, a_options? : ConstructorOptions ){\n        super( _cidCounter++ );\n        this.attributes = {};\n        \n        const options = a_options || {},\n              values = ( options.parse ? this.parse( a_values, options ) :  a_values ) || {};\n\n        isProduction || typeCheck( this, values, options );\n\n        this._previousAttributes = this.attributes = new this.Attributes( this, values, options );\n\n        this.initialize( a_values, a_options );\n\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\n    }\n\n    // Initialization callback, to be overriden by the subclasses \n    initialize( values?, options? ){}\n\n    // Deeply clone record, optionally setting new owner.\n    clone( options : CloneOptions = {} ) : this {\n        const copy : this = new (<any>this.constructor)( this.attributes, { clone : true } );\n        \n        if( options.pinStore ) copy._defaultStore = this.getStore();\n\n        return copy;\n    }\n\n    // Validate attributes.\n    _validateNested( errors : ChildrenErrors ) : number {\n        var length    = 0;\n\n        const { attributes } = this;\n\n        for( let attribute of this._attributesArray ){\n            const { name } = attribute,\n                error = attribute.validate( this, attributes[ name ], name );\n\n            if( error ){\n                errors[ name ] = error;\n                length++;\n            }\n        }\n\n        return length;\n    }\n\n    // Get attribute by key\n    get( key : string ) : any {\n        return this[ key ];\n    }\n\n    // Apply bulk in-place object update in scope of ad-hoc transaction \n    set( values : any, options? : TransactionOptions ) : this {\n        if( values ){ \n            const transaction = this._createTransaction( values, options );\n            transaction && transaction.commit();\n        }\n\n        return this;\n    }\n\n    /**\n     * Serialization control\n     */\n\n    // Default record-level serializer, to be overriden by subclasses \n    toJSON( options? : object ) : any {\n        const json = {},\n            { attributes } = this;\n\n        for( let attribute of this._attributesArray ){\n            const { name } = attribute,\n                value = attributes[ name ];\n\n            if( value !== void 0 ){\n                // ...serialize it according to its spec.\n                const asJson = attribute.toJSON.call( this, value, name, options );\n\n                // ...skipping undefined values. Such an attributes are excluded.\n                if( asJson !== void 0 ) json[ name ] = asJson; \n            }\n        }\n\n        return json;\n    }\n    \n    // Default record-level parser, to be overriden by the subclasses.\n    parse( data, options? : TransactionOptions ){\n        return data;\n    }\n\n    /**\n     * Transactional control\n     */\n    deepSet( name : string, value : any, options? : any ){\n        // Operation might involve series of nested object updates, thus it's wrapped in transaction.\n        this.transaction( () => {\n            const path  = name.split( '.' ),\n                l     = path.length - 1,\n                attr  = path[ l ];\n\n            let model = this;\n\n            // Locate the model, traversing the path.\n            for( let i = 0; i < l; i++ ){\n                const key = path[ i ];\n\n                // There might be collections in path, so use `get`.\n                let next    = model.get ? model.get( key ) : model[ key ];\n\n                // Create models, if they are not exist.\n                if( !next ){\n                    const attrSpecs = model._attributes;\n                    if( attrSpecs ){\n                        // If current object is model, create default attribute\n                        var newModel = attrSpecs[ key ].create();\n\n                        // If created object is model, nullify attributes when requested\n                        if( options && options.nullify && newModel._attributes ){\n                            newModel.clear( options );\n                        }\n\n                        model[ key ] = next = newModel;\n                    }\n                    // Silently fail in other case.\n                    else return;\n                }\n                \n                model = next;\n            }\n\n            // Set model attribute.\n            if( model.set ){\n                model.set({ [ attr ] : value }, options );\n            }\n            else{\n                model[ attr ] = value;\n            }\n        });\n\n        return this;\n    }\n            \n    // Returns owner without the key (usually it's collection)\n    get collection() : any {\n        return this._ownerKey ? null : this._owner;\n    }\n\n    // Dispose object and all childrens\n    dispose(){\n        if( this._disposed ) return;\n\n        const { attributes } = this;\n\n        for( let attr of this._attributesArray ){\n            attr.dispose( this, attributes[ attr.name ] );\n        }\n        \n        super.dispose();\n    }\n\n    _log( level : LogLevel, topic: string, text : string, props : object, a_logger? : Logger ) : void {\n        ( a_logger || logger ).trigger( level, topic, text, {\n            ...props,\n            'Record' : this,\n            'Attributes definition:' : this._attributes\n        });\n    }\n\n    getClassName() : string {\n        return super.getClassName() || 'Record';\n    }\n\n    // Dummies to \n    _createTransaction( values : object, options : TransactionOptions ) : Transaction { return void 0; }\n    // Simulate attribute change \n    forceAttributeChange : ( key : string, options : TransactionOptions ) => void\n    _onChildrenChange : ( child : Transactional, options : TransactionOptions ) => void\n\n\n    /**\n     * Map methods\n     */\n\n    forEach( iteratee : ( value? : any, key? : string ) => void, context? : any ){\n        const fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee,\n            { attributes } = this;\n\n        for( const key in this.attributes ){\n            const value = attributes[ key ];\n            if( value !== void 0 ) fun( value, key );\n        }\n    }\n\n    [ Symbol.iterator ](){\n        return new RecordEntriesIterator( this );\n    }\n\n    entries(){\n        return new RecordEntriesIterator( this );\n    }\n\n    // Get array of attribute keys (Record) or record ids (Collection) \n    keys() : string[] {\n        const keys : string[] = [];\n\n        this.forEach( ( value, key ) => value === void 0 || keys.push( key ) );\n\n        return keys;\n    }\n};\n\nassign( Record.prototype, UpdateRecordMixin, IORecordMixin );\n\n/***********************************************\n * Helper functions\n */\n\nclass BaseRecordAttributes {\n    id : string | number\n\n    constructor( record : Record, x : AttributesValues, options : TransactionOptions ) {\n        this.id = x.id;\n    }\n}\n\nRecord.prototype.Attributes = BaseRecordAttributes;\n\nclass BaseRecordAttributesCopy {\n    id : string | number\n\n    constructor( x : AttributesValues ) {\n        this.id = x.id;\n    }\n}\n\nRecord.prototype.AttributesCopy = BaseRecordAttributesCopy;\n\nconst IdAttribute = AnyType.create({ value : void 0 }, 'id' );\nRecord.prototype._attributes = { id : IdAttribute };\nRecord.prototype._attributesArray = [ IdAttribute ];\n\nfunction typeCheck( record : Record, values : object, options ){\n    if( shouldBeAnObject( record, values, options ) ){\n        const { _attributes } = record;\n        let unknown : string[];\n\n        for( let name in values ){\n            if( !_attributes[ name ] ){\n                unknown || ( unknown = [] );\n                unknown.push( `'${ name }'` );\n            }\n        }\n\n        if( unknown ){\n            unknownAttrsWarning( record, unknown, { values }, options );\n        }\n    }\n}\n\nexport class RecordEntriesIterator implements Iterator<[string, any]> {\n    private idx = 0;\n    \n    constructor( private readonly record : Record){}\n\n    next() : IteratorResult<[string, any]> {\n        const { record } = this,\n            metatype = record._attributesArray[ this.idx++ ];\n\n        return {\n            done : !metatype,\n            value : metatype ? [ metatype.name, record[ metatype.name ] ] : void 0\n        };\n    }\n}","import { predefine, tools } from '../object-plus';\nimport { Transactional } from '../transactions';\nimport { ChainableAttributeSpec, createSharedTypeSpec, type } from './attrDef';\nimport { AggregatedType, SharedType } from './metatypes';\nimport { createAttributesMixin } from './mixin';\nimport { Record, RecordDefinition } from './record';\n\nexport * from './metatypes';\nexport * from './attrDef'\n\nexport { Record };\n\nconst { assign, defaults, omit, getBaseClass } = tools;\n\nRecord.onExtend = function( this : typeof Record, BaseClass : typeof Record ){\n    Transactional.onExtend.call( this, BaseClass );\n\n    // Create the default collection\n    const Class = this;\n\n    @predefine class DefaultCollection extends BaseClass.Collection<any> {\n        static model = Class;\n    }\n\n    this.DefaultCollection = DefaultCollection;\n\n    // If there are no collection defined in statics, use the default collection.\n    // It will appear in onDefine's definition, overriding all other settings.\n    if( Class.Collection === BaseClass.Collection ){\n        this.Collection = DefaultCollection;\n    }\n\n    // Create Class.shared modifier\n    createSharedTypeSpec( this, SharedType );\n}\n\nRecord.onDefine = function( definition : RecordDefinition, BaseClass : typeof Record ){\n    const baseProto : Record = BaseClass.prototype;\n\n    // Compile attributes spec, creating definition mixin.\n    const { properties, _localEvents, ...dynamicMixin } = createAttributesMixin( this.attributes = getAttributes( definition ), baseProto._attributes );\n    assign( this.prototype, dynamicMixin );\n    \n    definition.properties = defaults( definition.properties || {}, properties );\n    definition._localEvents = _localEvents;\n    \n    Transactional.onDefine.call( this, definition, BaseClass );\n\n    // Finalize the definition of the default collection.\n    this.DefaultCollection.define( definition.collection || {} );\n\n    // assign collection from the definition.\n    this.Collection = definition.Collection;\n    this.Collection.prototype.model = this;\n\n    if( definition.endpoint ) this.Collection.prototype._endpoint = definition.endpoint;    \n}\n\ncreateSharedTypeSpec( Record, SharedType );\n\nfunction getAttributes({ defaults, attributes, idAttribute } : RecordDefinition ) {\n    const definition = attributes || defaults || {};\n    \n    // If there is an undeclared idAttribute, add its definition as untyped generic attribute.\n    if( idAttribute && !( idAttribute in definition ) ){\n        definition[ idAttribute ] = void 0;\n    }\n\n    return definition;\n}\n\ndeclare var Reflect;\n\nexport function attr( proto : object, attrName : string ) : void;\nexport function attr( spec : any ) : PropertyDecorator;\nexport function attr( proto, attrName? : string ) : any {\n    if( attrName ){\n        // Called without the spec. Extract the type.\n        if( typeof Reflect !== 'undefined' && Reflect.getMetadata ){\n            type( Reflect.getMetadata( \"design:type\", proto, attrName ) ).asProp( proto, attrName );\n        }\n        else{\n            proto._log( 'error', 'Type-R:MissingImport', 'Add import \"reflect-metadata\"; as the first line of your app.' );\n        }\n    }\n    else{\n        return ChainableAttributeSpec.from( proto ).asProp;\n    }\n}\n\nexport function prop( spec ) : any {\n    return spec.asProp;\n}","import { eventsApi, Logger } from '../object-plus';\nimport { Record } from '../record';\nimport { ItemsBehavior, Owner, Transaction, Transactional, transactionApi, TransactionOptions } from '../transactions';\n\n\nconst { trigger2, trigger3, on, off } = eventsApi,\n      { commit } = transactionApi,\n      _aquire = transactionApi.aquire, _free = transactionApi.free;\n\n/** @private */\nexport interface CollectionCore extends Transactional, Owner {\n    _byId : IdIndex\n    models : Record[]\n    model : typeof Record\n    idAttribute : string // TODO: Refactor inconsistent idAttribute usage\n    _comparator : Comparator\n    get( objOrId : string | Record | Object ) : Record    \n    _itemEvents? : eventsApi.EventMap\n    _shared : number\n    _aggregationError : Record[]\n\n    _log( level : string, topic : string, text : string, value : any, logger : Logger ) : void\n}\n\n// Collection's manipulation methods elements\nexport type Elements = ( Object | Record )[];\n\nexport interface CollectionOptions extends TransactionOptions {\n    sort? : boolean\n}\n\nexport type Comparator = ( a : Record, b : Record ) => number;  \n\n/** @private */\nexport function dispose( collection : CollectionCore ) : Record[]{\n    const { models } = collection;\n\n    collection.models = [];\n    collection._byId  = {};\n\n    freeAll( collection, models );\n    return models;\n}\n\n/** @private */\nexport function convertAndAquire( collection : CollectionCore, attrs : {} | Record, options : CollectionOptions ){\n    const { model } = collection;\n    \n    let record : Record;\n\n    if( collection._shared ){\n        record = attrs instanceof model ? attrs : <Record>model.create( attrs, options );\n\n        if( collection._shared & ItemsBehavior.listen ){\n            on( record, record._changeEventName, collection._onChildrenChange, collection );\n        }\n    }\n    else{\n        record = attrs instanceof model ? ( options.merge ? attrs.clone() : attrs ) : <Record>model.create( attrs, options );\n\n        if( !_aquire( collection, record ) ){\n            const errors = collection._aggregationError || ( collection._aggregationError = [] );\n            errors.push( record );\n        }\n    }    \n\n    // Subscribe for events...\n    const { _itemEvents } = collection;\n    _itemEvents && _itemEvents.subscribe( collection, record );\n\n    return record;\n}\n\n/** @private */\nexport function free( owner : CollectionCore, child : Record, unset? : boolean ) : void {\n    if( owner._shared ){\n        if( owner._shared & ItemsBehavior.listen ){\n            off( child, child._changeEventName, owner._onChildrenChange, owner );\n        }\n    }\n    else{\n        _free( owner, child );\n        unset || child.dispose();\n    }\n\n    const { _itemEvents } = owner;\n    _itemEvents && _itemEvents.unsubscribe( owner, child );\n}\n\n/** @private */\nexport function freeAll( collection : CollectionCore, children : Record[] ) : Record[] {\n    for( let child of children ){\n        free( collection, child );\n    }\n\n    return children;\n}\n\n/**\n * Silently sort collection, if its required. Returns true if sort happened.\n * @private\n */   \nexport function sortElements( collection : CollectionCore, options : CollectionOptions ) : boolean {\n    let { _comparator } = collection;\n    if( _comparator && options.sort !== false ){\n        collection.models.sort( _comparator );\n        return true;\n    }\n\n    return false;\n}\n\n/**********************************\n * Collection Index\n * @private \n */\nexport interface IdIndex {\n    [ id : string ] : Record\n}\n\n/** @private Add record */ \nexport function addIndex( index : IdIndex, model : Record ) : void {\n    index[ model.cid ] = model;\n    var id             = model.id;\n    \n    if( id || id === 0 ){\n        index[ id ] = model;\n    }\n}\n\n/** @private Remove record */ \nexport function removeIndex( index : IdIndex, model : Record ) : void {\n    delete index[ model.cid ];\n    var id = model.id;\n    if( id || id === 0 ){\n        delete index[ id ];\n    }\n}\n\nexport function updateIndex( index : IdIndex, model : Record ){\n    delete index[ model.previous( model.idAttribute ) ];\n\n    const { id } = model;\n    id == null || ( index[ id ] = model );\n}\n\n/***\n * In Collections, transactions appears only when\n * add remove or change events might be emitted.\n * reset doesn't require transaction.\n * \n * Transaction holds information regarding events, and knows how to emit them.\n * \n * Two major optimization cases.\n * 1) Population of an empty collection\n * 2) Update of the collection (no or little changes) - it's crucial to reject empty transactions.\n */\n\n\n// Transaction class. Implements two-phase transactions on object's tree.\n/** @private */ \nexport class CollectionTransaction implements Transaction {\n    // open transaction\n    constructor(    public object : CollectionCore,\n                    public isRoot : boolean,\n                    public added : Record[],\n                    public removed : Record[],\n                    public nested : Transaction[],\n                    public sorted : boolean ){}\n\n    // commit transaction\n    commit( initiator? : Transactional ){\n        const { nested, object } = this,\n              { _isDirty } = object;\n\n        // Commit all nested transactions...\n        for( let transaction of nested ){\n            transaction.commit( object );\n        }\n\n        if( object._aggregationError ){\n            logAggregationError( object, _isDirty );\n        }\n\n        // Just trigger 'change' on collection, it must be already triggered for models during nested commits.\n        // ??? TODO: do it in nested transactions loop? This way appears to be more correct. \n        for( let transaction of nested ){\n            trigger2( object, 'change', transaction.object, _isDirty );\n        }\n\n        // Notify listeners on attribute changes...\n        const { added, removed } = this;\n\n        // Trigger `add` events for both model and collection.\n        for( let record of added ){\n            trigger3( record, 'add', record, object, _isDirty );\n            trigger3( object, 'add', record, object, _isDirty );\n        }\n\n        // Trigger `remove` events for both model and collection.\n        for( let record of removed ){\n            trigger3( record, 'remove', record, object, _isDirty );\n            trigger3( object, 'remove', record, object, _isDirty );\n        }\n\n        if( this.sorted ){\n            trigger2( object, 'sort', object, _isDirty );\n        }\n\n        if( added.length || removed.length ){\n            trigger2( object, 'update', object, _isDirty );\n        }\n\n        this.isRoot && commit( object, initiator );\n    }\n}\n\nexport function logAggregationError( collection : CollectionCore, options : TransactionOptions ){\n    collection._log( 'error', 'Type-R:InvalidOwner', 'added records already have an owner', collection._aggregationError, options.logger );\n    collection._aggregationError = void 0;\n}","import { Record } from '../record';\nimport { Transaction, transactionApi } from '../transactions';\nimport { addIndex, CollectionCore, CollectionOptions, CollectionTransaction, convertAndAquire, logAggregationError, sortElements, updateIndex } from './commons';\n\nconst { begin, commit, markAsDirty } = transactionApi;\n\nexport interface AddOptions extends CollectionOptions {\n    at? : number \n}\n\n/** @private */\nexport function addTransaction( collection : CollectionCore, items : any[], options : AddOptions, merge? : boolean ){\n    const isRoot = begin( collection ),\n          nested : Transaction[]= [];\n\n    var added = appendElements( collection, items, nested, options, merge );\n\n    if( added.length || nested.length ){\n        let needSort = sortOrMoveElements( collection, added, options );\n        if( markAsDirty( collection, options ) ){\n            return new CollectionTransaction( collection, isRoot, added, [], nested, needSort );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection, options );\n    }\n\n    // No changes...\n    isRoot && commit( collection );\n};\n\n// Handle sort or insert at options for add operation. Reurns true if sort happened.\n/** @private */ \nfunction sortOrMoveElements( collection : CollectionCore, added : Record[], options : AddOptions ) : boolean {\n    let at = options.at;\n\n    // if `at` option is given, it overrides sorting option...\n    if( at != null ){\n        // Take an original collection's length. \n        const length = collection.models.length - added.length;\n\n        // Crazy Backbone rules about `at` index. I don't know what that guys smoke.\n        at = Number( at );\n        if( at < 0 ) at += length + 1;\n        if( at < 0 ) at = 0;\n        if( at > length ) at = length;\n\n        // Move added elements to desired position. In place.\n        moveElements( collection.models, at, added );\n        return false;\n    }\n\n    return sortElements( collection, options );\n}\n\n/** @private */\nfunction moveElements( source : any[], at : number, added : any[] ) : void {\n    for( var j = source.length - 1, i = j - added.length; i >= at; i--, j-- ){\n        source[ j ] = source[ i ];\n    }\n\n    for( i = 0, j = at; i < added.length; i++, j++ ){\n        source[ j ] = added[ i ];\n    }\n}\n\n// append data to model and index\n/** @private */\nfunction appendElements( collection : CollectionCore, a_items : any[], nested : Transaction[], a_options : AddOptions, forceMerge : boolean ){\n    var { _byId, models } = collection,\n        merge       = ( forceMerge || a_options.merge ) && !collection._shared,\n        parse       = a_options.parse,\n        idAttribute = collection.model.prototype.idAttribute,\n        prevLength = models.length;\n\n    for( const item of a_items ){\n        let model = item ? _byId[ item[ idAttribute ] ] || _byId[ item.cid ] : null;\n\n        if( model ){\n            if( merge && item !== model ){\n                var attrs = item.attributes || item;\n                const transaction = model._createTransaction( attrs, a_options );\n                transaction && nested.push( transaction );\n\n                if( model.hasChanged( idAttribute ) ){\n                    updateIndex( _byId, model );\n                }\n            }\n        }\n        else{\n            model = convertAndAquire( collection, item, a_options );\n            models.push( model );\n            addIndex( _byId, model );\n        }\n    }\n\n    return models.slice( prevLength );\n}\n","/*************\n * Remove items from collections.\n * \n * Cannot be a part of two-phase transaction on object tree.\n * Can be executed in the scope of ad-hoc transaction or from the trigger, though.\n *\n * Implemented with low-level API. \n * Most frequent operation - single element remove. Thus, it have the fast-path.\n */\n\nimport { eventsApi } from '../object-plus';\nimport { Record } from '../record';\nimport { transactionApi, TransactionOptions } from '../transactions';\nimport { CollectionCore, CollectionTransaction, free, removeIndex } from './commons';\n\nconst { trigger2, trigger3 } = eventsApi,\n    { markAsDirty, begin, commit } = transactionApi;\n\n/** @private */\nexport function removeOne( collection : CollectionCore, el : Record | {} | string, options : TransactionOptions ) : Record {\n    var model : Record = collection.get( el );\n\n    if( model ){\n        const isRoot = begin( collection ),\n              models = collection.models;\n\n        // Remove model form the collection. \n        models.splice( models.indexOf( model ), 1 );\n        removeIndex( collection._byId, model );\n        \n        // Mark transaction as dirty. \n        const notify = markAsDirty( collection, options );\n\n        // Send out events.\n        if( notify ){\n            trigger3( model, 'remove', model, collection, options );\n            trigger3( collection, 'remove', model, collection, options );\n        } \n\n        free( collection, model, options.unset );\n\n        notify && trigger2( collection, 'update', collection, options );\n\n        // Commit transaction.\n        isRoot && commit( collection );\n\n        return model;\n    }\n};\n\n/** Optimized for removing many elements\n * 1. Remove elements from the index, checking for duplicates\n * 2. Create new models array matching index\n * 3. Send notifications and remove references\n */\n\n/** @private */\nexport function removeMany( collection : CollectionCore, toRemove : any[], options ){\n    const removed = _removeFromIndex( collection, toRemove, options.unset );\n    if( removed.length ){\n        const isRoot = begin( collection );\n\n        _reallocate( collection, removed.length );\n\n        if( markAsDirty( collection, options ) ){\n            const transaction = new CollectionTransaction( collection, isRoot, [], removed, [], false );\n            transaction.commit();\n        }\n        else{\n            // Commit transaction.\n            isRoot && commit( collection );\n        }\n    }\n\n    return removed;\n};\n\n// remove models from the index...\n/** @private */\nfunction _removeFromIndex( collection, toRemove, unset : boolean ){\n    var removed = Array( toRemove.length ),\n        _byId   = collection._byId;\n\n    for( var i = 0, j = 0; i < toRemove.length; i++ ){\n        var model = collection.get( toRemove[ i ] );\n        if( model ){\n            removed[ j++ ] = model;\n            removeIndex( _byId, model );\n            free( collection, model, unset );\n        }\n    }\n\n    removed.length = j;\n\n    return removed;\n}\n\n// Allocate new models array removing models not present in the index.\n/** @private */\nfunction _reallocate( collection, removed ){\n    var prev   = collection.models,\n        models = collection.models = Array( prev.length - removed ),\n        _byId = collection._byId;\n\n    for( var i = 0, j = 0; i < prev.length; i++ ){\n        var model = prev[ i ];\n\n        if( _byId[ model.cid ] ){\n            models[ j++ ] = model;\n        }\n    }\n\n    models.length = j;\n}","import { Record } from '../record';\nimport { Transaction, transactionApi } from '../transactions';\nimport { addIndex, CollectionCore, CollectionOptions, CollectionTransaction, convertAndAquire, Elements, free, freeAll, IdIndex, logAggregationError, sortElements } from './commons';\n\nconst { begin, commit, markAsDirty } = transactionApi;\n\n/** @private */\nconst silentOptions = { silent : true };\n\n/** @private */\nexport function emptySetTransaction( collection : CollectionCore, items : Elements, options : CollectionOptions, silent? : boolean ){\n    const isRoot = begin( collection );\n\n    const added = _reallocateEmpty( collection, items, options );\n\n    if( added.length ){\n        const needSort = sortElements( collection, options );\n\n        if( markAsDirty( collection, silent ? silentOptions : options ) ){\n            // 'added' is the reference to this.models. Need to copy it.\n            return new CollectionTransaction( collection, isRoot, added.slice(), [], [], needSort );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection, options );\n    }\n\n    // No changes...\n    isRoot && commit( collection );\n};\n\n/** @private */\nexport function setTransaction( collection, items, options ){\n    const isRoot = begin( collection ),\n          nested = [];\n\n    var previous = collection.models,\n        added    = _reallocate( collection, items, nested, options );\n\n    const reusedCount = collection.models.length - added.length,\n          removed = reusedCount < previous.length ? (\n                        reusedCount ? _garbageCollect( collection, previous ) :\n                                        freeAll( collection, previous )\n                    ) : [];                    \n    \n    const addedOrChanged = nested.length || added.length,\n          // As we are reallocating models array, it needs to be sorted even if there are no changes.\n          sorted = ( sortElements( collection, options ) && addedOrChanged ) || added.length || options.sorted;\n\n    if( addedOrChanged || removed.length || sorted ){\n        if( markAsDirty( collection, options ) ){ \n            return new CollectionTransaction( collection, isRoot, added, removed, nested, sorted );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection, options );\n    }\n\n    isRoot && commit( collection );\n};\n\n// Remove references to all previous elements, which are not present in collection.\n// Returns an array with removed elements.\n/** @private */\nfunction _garbageCollect( collection : CollectionCore, previous : Record[] ) : Record[]{\n    const { _byId }  = collection,\n          removed = [];\n\n    // Filter out removed models and remove them from the index...\n    for( let record of previous ){\n        if( !_byId[ record.cid ] ){\n            removed.push( record );\n            free( collection, record );\n        }\n    }\n\n    return removed;\n}\n\n// reallocate model and index\n/** @private */\nfunction _reallocate( collection : CollectionCore, source : any[], nested : Transaction[], options ){\n    var models      = Array( source.length ),\n        _byId : IdIndex = {},\n        merge       = ( options.merge == null ? true : options.merge ) && !collection._shared,\n        _prevById   = collection._byId,\n        prevModels  = collection.models, \n        idAttribute = collection.model.prototype.idAttribute,\n        toAdd       = [],\n        orderKept   = true;\n\n    // for each item in source set...\n    for( var i = 0, j = 0; i < source.length; i++ ){\n        var item  = source[ i ],\n            model : Record = null;\n\n        if( item ){\n            var id  = item[ idAttribute ],\n                cid = item.cid;\n\n            if( _byId[ id ] || _byId[ cid ] ) continue;\n\n            model = _prevById[ id ] || _prevById[ cid ];\n        }\n\n        if( model ){\n            if( merge && item !== model ){\n                if( orderKept && prevModels[ j ] !== model ) orderKept = false;\n\n                var attrs = item.attributes || item;\n                const transaction = model._createTransaction( attrs, options );\n                transaction && nested.push( transaction );\n            }\n        }\n        else{\n            model = convertAndAquire( collection, item, options );\n            toAdd.push( model );\n        }\n\n        models[ j++ ] = model;\n        addIndex( _byId, model );\n    }\n\n    models.length = j;\n    collection.models   = models;\n    collection._byId    = _byId;\n\n    if( !orderKept ) options.sorted = true;\n\n    return toAdd;\n}\n\n/** @private */\nfunction _reallocateEmpty( self, source, options ){\n    var len         = source ? source.length : 0,\n        models      = Array( len ),\n        _byId : IdIndex = {},\n        idAttribute = self.model.prototype.idAttribute;\n\n    for( var i = 0, j = 0; i < len; i++ ){\n        var src = source[ i ];\n\n        if( src && ( _byId[ src[ idAttribute ] ] || _byId[ src.cid ] ) ){\n            continue;\n        }\n\n        var model = convertAndAquire( self, src, options );\n        models[ j++ ] = model;\n        addIndex( _byId, model );\n    }\n\n    models.length = j;\n    self._byId    = _byId;\n\n    return self.models = models;\n}","import { IOPromise, startIO } from '../io-tools';\nimport { define, definitions, EventMap, eventsApi, EventsDefinition, LogLevel, Mixable, mixinRules, tools, Logger, logger } from '../object-plus';\nimport { AggregatedType, createSharedTypeSpec, Record, SharedType } from '../record';\nimport { CloneOptions, ItemsBehavior, Transactional, TransactionalDefinition, transactionApi, TransactionOptions } from '../transactions';\nimport { AddOptions, addTransaction } from './add';\nimport { CollectionCore, CollectionTransaction, Elements, free, sortElements, updateIndex } from './commons';\nimport { removeMany, removeOne } from './remove';\nimport { emptySetTransaction, setTransaction } from './set';\n\n\nconst { trigger2 } = eventsApi,\n    { begin, commit, markAsDirty } = transactionApi,\n    { assign, defaults } = tools;\n\nlet _count = 0;\n\nexport type GenericComparator = string | ( ( x : Record ) => number ) | ( ( a : Record, b : Record ) => number ); \n\nexport interface CollectionOptions extends TransactionOptions {\n    comparator? : GenericComparator\n    model? : typeof Record\n}\n\nexport type Predicate<R> = ( ( val : R, key : number ) => boolean ) | Partial<R>;\n\nexport interface CollectionDefinition extends TransactionalDefinition {\n    model? : typeof Record,\n    itemEvents? : EventsDefinition\n    _itemEvents? : EventMap\n}\n\nconst slice = Array.prototype.slice;\n\nclass CollectionRefsType extends SharedType {\n    static defaultValue = [];\n}\n\n@define({\n    // Default client id prefix \n    cidPrefix : 'c',\n    model : Record,\n    _changeEventName : 'changes',\n    _aggregationError : null\n})\n@definitions({\n    comparator : mixinRules.value,\n    model : mixinRules.protoValue,\n    itemEvents : mixinRules.merge\n})\nexport class Collection< R extends Record = Record> extends Transactional implements CollectionCore, Iterable<R> {\n    _shared : number\n    _aggregationError : R[]\n\n    static Subset : typeof Collection\n    static Refs : typeof Collection\n    static _SubsetOf : typeof Collection\n    \n    createSubset( models : ElementsArg, options ){\n        const SubsetOf = (<any>this.constructor).subsetOf( this ).options.type,\n            subset   = new SubsetOf( models, options );\n            \n        subset.resolve( this );\n        return subset;\n    }\n\n    static onExtend( BaseClass : typeof Transactional ){\n        // Cached subset collection must not be inherited.\n        const Ctor = this;\n        this._SubsetOf = null;\n\n        function RefsCollection( a, b, listen? ){\n            Ctor.call( this, a, b, ItemsBehavior.share | ( listen ? ItemsBehavior.listen : 0 ) );\n        }\n\n        Mixable.mixins.populate( RefsCollection );\n        \n        RefsCollection.prototype = this.prototype;\n        RefsCollection._metatype = CollectionRefsType;\n\n        this.Refs = this.Subset = <any>RefsCollection;\n\n        Transactional.onExtend.call( this, BaseClass );\n        createSharedTypeSpec( this, SharedType );\n    }\n    \n    static onDefine( definition : CollectionDefinition, BaseClass : any ){\n        if( definition.itemEvents ){\n            const eventsMap = new EventMap( BaseClass.prototype._itemEvents );\n            eventsMap.addEventsMap( definition.itemEvents );\n            this.prototype._itemEvents = eventsMap;\n        }\n\n        if( definition.comparator !== void 0 ) this.prototype.comparator = definition.comparator;\n\n        Transactional.onDefine.call( this, definition );\n    }\n\n    static subsetOf : ( collectionReference : any ) => any;\n    \n    _itemEvents : EventMap\n\n    /***********************************\n     * Core Members\n     */\n    // Array of the records\n    models : R[]\n\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\n    get __inner_state__(){ return this.models; }\n\n    // Index by id and cid\n    _byId : { [ id : string ] : R }\n\n    set comparator( x : GenericComparator ){\n\n        switch( typeof x ){\n            case 'string' :\n                this._comparator = ( a, b ) => {\n                    const aa = a[ <string>x ], bb = b[ <string>x ];\n                    if( aa === bb ) return 0;\n                    return aa < bb ? -1 : + 1;\n                } \n                break;\n            case 'function' :\n                if( x.length === 1 ){\n                    this._comparator = ( a, b ) => {\n                        const aa = (<any>x).call( this, a ), bb = (<any>x).call( this, b );\n                        if( aa === bb ) return 0;\n                        return aa < bb ? -1 : + 1;\n                    }\n                }\n                else{\n                    this._comparator = ( a, b ) => (<any>x).call( this, a, b );\n                }\n                break;\n                \n            default :\n                this._comparator = null;\n        }\n    }\n    \n    // TODO: Improve typing\n    getStore() : Transactional {\n        return this._store || ( this._store = this._owner ? this._owner.getStore() : this._defaultStore );\n    }\n\n    _store : Transactional\n\n    get comparator(){ return this._comparator; }\n    _comparator : ( a : R, b : R ) => number\n\n    _onChildrenChange( record : R, options : TransactionOptions = {}, initiator? : Transactional ){\n        // Ignore updates from nested transactions.\n        if( initiator === this ) return;\n\n        const { idAttribute } = this;\n\n        if( record.hasChanged( idAttribute ) ){\n            updateIndex( this._byId, record );\n        }\n\n        const isRoot = begin( this );\n\n        if( markAsDirty( this, options ) ){\n            // Forward change event from the record.\n            trigger2( this, 'change', record, options )\n        }\n\n        isRoot && commit( this );\n    }\n\n    get( objOrId : string | object ) : R {\n        if( objOrId == null ) return;\n\n        if( typeof objOrId === 'object' ){\n            const id = objOrId[ this.idAttribute ];\n            return ( id !== void 0 && this._byId[ id ] ) || this._byId[ (<R>objOrId).cid ];\n        }\n        else{\n            return this._byId[ objOrId ];\n        }        \n    }\n\n    each( iteratee : ( val : R, key : number ) => void, context? : any ) : void {\n        this.models.forEach( iteratee, context );\n    }\n\n    // Loop through the members in the scope of transaction.\n    // Transactional version of each()\n    updateEach( iteratee : ( val : any, key : string | number ) => void, options? : TransactionOptions ){\n        const isRoot = transactionApi.begin( this );\n        this.models.forEach( iteratee );\n        isRoot && transactionApi.commit( this );\n    }\n\n    _validateNested( errors : {} ) : number {\n        // Don't validate if not aggregated.\n        if( this._shared ) return 0;\n\n        let count = 0;\n\n        this.each( record => {\n            const error = record.validationError;\n            if( error ){\n                errors[ record.cid ] = error;\n                count++;\n            }\n        });\n\n        return count;\n    }\n\n    model : typeof Record\n\n    // idAttribute extracted from the model type.\n    idAttribute : string\n\n    constructor( records? : ( R | {} )[], options : CollectionOptions = {}, shared? : number ){\n        super( _count++ );\n        this.models = [];\n        this._byId = {};\n        \n        this.comparator  = this.comparator;\n\n        if( options.comparator !== void 0 ){\n            this.comparator = options.comparator;\n            options.comparator = void 0;\n        }\n        \n        this.model       = this.model;\n        \n        if( options.model ){\n            this.model = options.model;\n            options.model = void 0;\n        }\n\n        this.idAttribute = this.model.prototype.idAttribute; //TODO: Remove?\n\n        this._shared = shared || 0;\n\n        if( records ){\n            const elements = toElements( this, records, options );\n            emptySetTransaction( this, elements, options, true );\n        }\n\n        this.initialize.apply( this, arguments );\n\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\n    }\n\n    initialize(){}\n\n    first() : R { return this.models[ 0 ]; }\n    last() : R { return this.models[ this.models.length - 1 ]; }\n    at( a_index : number ) : R {\n        const index = a_index < 0 ? a_index + this.models.length : a_index;    \n        return this.models[ index ];\n    }\n\n    // Deeply clone collection, optionally setting new owner.\n    clone( options : CloneOptions = {} ) : this {\n        const models = this._shared & ItemsBehavior.share ? this.models : this.map( model => model.clone() ),\n              copy : this = new (<any>this.constructor)( models, { model : this.model, comparator : this.comparator }, this._shared );\n        \n        if( options.pinStore ) copy._defaultStore = this.getStore();\n        \n        return copy;\n    }\n\n    toJSON( options? : object ) : any {\n        return this.models.map( model => model.toJSON( options ) );\n    }\n\n    // Apply bulk in-place object update in scope of ad-hoc transaction \n    set( elements : ElementsArg = [], options : TransactionOptions = {} ) : this {\n        if( (<any>options).add !== void 0 ){\n            this._log( 'warn', \"Type-R:InvalidOption\", \"Collection.set doesn't support 'add' option, behaving as if options.add === true.\", options );\n        }\n\n        // Handle reset option here - no way it will be populated from the top as nested transaction.\n        if( options.reset ){\n            this.reset( elements, options )\n        }\n        else{\n            const transaction = this._createTransaction( elements, options );\n            transaction && transaction.commit();\n        } \n\n        return this;    \n    }\n\n        /**\n     * Enable or disable live updates.\n     * \n     * `true` enables full collection synchronization.\n     * `false` cancel live updates.\n     * `json => true | false` - filter updates\n     */\n    liveUpdates( enabled : LiveUpdatesOption ) : IOPromise<this> {\n        if( enabled ){\n            this.liveUpdates( false );\n\n            const filter = typeof enabled === 'function' ? enabled : () => true;\n\n            this._liveUpdates = {\n                updated : json => {\n                    filter( json ) && this.add( json, { parse : true, merge : true } );\n                },\n\n                removed : id => this.remove( id )\n            };\n\n            return this.getEndpoint().subscribe( this._liveUpdates, this ).then( () => this );\n        }\n        else{\n            if( this._liveUpdates ){\n                this.getEndpoint().unsubscribe( this._liveUpdates, this );\n                this._liveUpdates = null;\n            }\n        }\n    }\n\n    _liveUpdates : object\n\n    fetch( a_options : { liveUpdates? : LiveUpdatesOption } & TransactionOptions = {} ) : IOPromise<this> {\n        const options = { parse : true, ...a_options },\n            endpoint = this.getEndpoint();\n\n        return startIO(\n            this,\n            endpoint.list( options, this ),\n            options,\n\n            json => {\n                let result : any = this.set( json, { parse : true, ...options } as TransactionOptions );\n                \n                if( options.liveUpdates ){\n                    result = this.liveUpdates( options.liveUpdates );\n                }\n\n                return result;\n            }\n        );\n    }\n\n    dispose() : void {\n        if( this._disposed ) return;\n\n        const aggregated = !this._shared;\n\n        for( let record of this.models ){\n            free( this, record );\n\n            if( aggregated ) record.dispose();\n        }\n\n        this.liveUpdates( false );\n\n        super.dispose();\n    }\n\n    reset( a_elements? : ElementsArg, options : TransactionOptions = {} ) : R[] {\n        const isRoot = begin( this ),\n              previousModels = this.models;\n\n        // Make all changes required, but be silent.\n        if( a_elements ){            \n            emptySetTransaction( this, toElements( this, a_elements, options ), options, true );\n        }\n        else{\n            this._byId = {};\n            this.models = [];\n        }\n\n        markAsDirty( this, options );\n\n        options.silent || trigger2( this, 'reset', this, defaults( { previousModels : previousModels }, options ) );\n\n        // Dispose models which are not in the updated collection.\n        const { _byId } = this;\n        \n        for( let toDispose of previousModels ){\n            _byId[ toDispose.cid ] || free( this, toDispose );\n        }\n\n        isRoot && commit( this );\n        return this.models;\n    }\n\n    // Add elements to collection.\n    add( a_elements : ElementsArg , options : AddOptions = {} ){\n        const elements = toElements( this, a_elements, options ),\n              transaction = this.models.length ?\n                    addTransaction( this, elements, options ) :\n                    emptySetTransaction( this, elements, options );\n\n        if( transaction ){\n            transaction.commit();\n            return transaction.added;\n        }\n    }\n\n    // Remove elements. \n    remove( recordsOrIds : any, options : CollectionOptions = {} ) : R[] | R {\n        if( recordsOrIds ){\n            return Array.isArray( recordsOrIds ) ?\n                        removeMany( this, recordsOrIds, options ) as R[]:\n                        removeOne( this, recordsOrIds, options ) as R;\n        }\n\n        return [];\n    }\n\n    // Apply bulk object update without any notifications, and return open transaction.\n    // Used internally to implement two-phase commit.   \n    _createTransaction( a_elements : ElementsArg, options : TransactionOptions = {} ) : CollectionTransaction | void {\n        const elements = toElements( this, a_elements, options );\n\n        if( this.models.length ){\n            return options.remove === false ?\n                        addTransaction( this, elements, options, true ) :\n                        setTransaction( this, elements, options );\n        }\n        else{\n            return emptySetTransaction( this, elements, options );\n        }\n    }\n\n    static _metatype = AggregatedType;\n\n    /***********************************\n     * Collection manipulation methods\n     */\n\n    pluck( key : keyof R ) : any[] {\n        return this.models.map( model => model[ key ] );\n    }\n\n    sort( options : TransactionOptions = {} ) : this {\n        if( sortElements( this, options ) ){\n            const isRoot = begin( this );\n            \n            if( markAsDirty( this, options ) ){\n                trigger2( this, 'sort', this, options );\n            }\n\n            isRoot && commit( this );\n        }\n\n        return this;\n    }\n\n    // Remove and return given model.\n    // TODO: do not dispose the model for aggregated collection.\n    unset( modelOrId : R | string, options? ) : R {\n        const value = this.get( modelOrId );\n        this.remove( modelOrId, { unset : true, ...options } );\n        return value;\n    }\n\n    modelId( attrs : {} ) : any {\n        return attrs[ this.model.prototype.idAttribute ];\n    }\n\n    // Toggle model in collection.\n    toggle( model : R, a_next? : boolean ) : boolean {\n        var prev = Boolean( this.get( model ) ),\n            next = a_next === void 0 ? !prev : Boolean( a_next );\n\n        if( prev !== next ){\n            if( prev ){\n                this.remove( model );\n            }\n            else{\n                this.add( model );\n            }\n        }\n\n        return next;\n    }\n\n    _log( level : LogLevel, topic : string, text : string, value : object, a_logger? : Logger ) : void {\n        ( a_logger || logger ).trigger( level, topic, `${ this.model.prototype.getClassName() }.${ this.getClassName() }: ` + text, {\n            Argument : value,\n            'Attributes spec' : this.model.prototype._attributes\n        });\n    }\n\n    getClassName() : string {\n        return super.getClassName() || 'Collection';\n    }\n\n    /***********************************\n     * Proxied Array methods\n     */\n\n    get length() : number { return this.models.length; }\n\n    // Add a model to the end of the collection.\n    push(model : ElementsArg, options : CollectionOptions ) {\n        return this.add(model, assign({at: this.length}, options));\n    }\n\n    // Remove a model from the end of the collection.\n    pop( options : CollectionOptions ) : R {\n        var model = this.at(this.length - 1);\n        this.remove(model, { unset : true, ...options });\n        return model;\n    }\n\n    // Add a model to the beginning of the collection.\n    unshift(model : ElementsArg, options : CollectionOptions ) {\n        return this.add(model, assign({at: 0}, options));\n    }\n  \n    // Remove a model from the beginning of the collection.\n    shift( options? : CollectionOptions ) : R {\n        const model = this.at(0);\n        this.remove( model, { unset : true, ...options } );\n        return model;\n    }\n\n    // Slice out a sub-array of models from the collection.\n    slice( begin : number, end? : number ) : R[] {\n        return this.models.slice( begin, end );\n    }\n  \n    indexOf( modelOrId : string | Partial<R> ) : number {\n        return this.models.indexOf( this.get( modelOrId ) );\n    }\n\n    filter( iteratee : Predicate<R>, context? : any ) : R[] {\n        return this.models.filter( toPredicateFunction( iteratee ), context );\n    }\n\n    find( iteratee : Predicate<R>, context? : any ) : R {\n        return this.models.find( toPredicateFunction( iteratee ), context );\n    }\n\n    some( iteratee : Predicate<R>, context? : any ) : boolean {\n        return this.models.some( toPredicateFunction( iteratee ), context );\n    }\n\n    forEach( iteratee : ( val : R, key? : number ) => void, context? : any ) : void {\n        this.models.forEach( iteratee, context );\n    }\n    \n    [ Symbol.iterator ]() : IterableIterator<R> {\n        return this.models[ Symbol.iterator ]();\n    }\n\n    values() : IterableIterator<R> {\n        return this.models.values();\n    }\n\n    entries() : IterableIterator<[ number, R ]>{\n        return this.models.entries();\n    }\n\n    every( iteratee : Predicate<R>, context? : any ) : boolean {\n        return this.models.every( toPredicateFunction( iteratee ), context );\n    }\n\n    // Map members to an array\n    map<T>( iteratee : ( val : R, key : number ) => T, context? : any ) : T[]{\n        return this.models.map( iteratee, context );\n    }\n}\n\nexport type LiveUpdatesOption = boolean | ( ( x : any ) => boolean );\n\nexport type ElementsArg = Object | Record | Object[] | Record[];\n\n// TODO: make is safe for parse to return null (?)\nfunction toElements( collection : Collection, elements : ElementsArg, options : CollectionOptions ) : Elements {\n    const parsed = options.parse ? collection.parse( elements, options ) : elements; \n    return Array.isArray( parsed ) ? parsed : [ parsed ];\n}\n\ncreateSharedTypeSpec( Collection, SharedType );\n\nRecord.Collection = <any>Collection;\n\nfunction bindContext( fun : Function, context? : any ){\n    return context !== void 0 ? ( v, k ) => fun.call( context, v, k ) : fun;\n}\n\nfunction toPredicateFunction<R>( iteratee : Predicate<R> ){\n    switch( typeof iteratee ){\n        case 'function' : return iteratee;\n        case 'object' :\n            const keys = Object.keys( iteratee );\n            \n            return x => {\n                for( let key of keys ){\n                    if( iteratee[ key ] !== x[ key ] )\n                        return false;\n                }\n\n                return true;\n            }\n        default : throw new Error( 'Invalid iteratee' );\n    }\n}","import { Collection } from '../collection';\nimport { Record } from '../record';\nimport { CompiledReference } from '../traversable';\n\nexport type CollectionReference = ( () => Collection ) | Collection | string; \n\n/** @private */\nexport function parseReference( collectionRef : CollectionReference ) : ( root : Record ) => Collection {\n    switch( typeof collectionRef ){\n        case 'function' :\n            return root => (<any>collectionRef).call( root );\n        case 'object'   :\n            return () => <Collection>collectionRef;\n        case 'string'   :\n            const { resolve } = new CompiledReference( <string>collectionRef );\n            return resolve;\n    }\n}","import { AnyType, ChainableAttributeSpec, Record } from '../record';\nimport { CollectionReference, parseReference } from './commons';\n\n\n/********\n * Reference to model by id.\n * \n * Untyped attribute. Holds model id, when unresolved. When resolved, is substituted\n * with a real model.\n * \n * No model changes are detected and counted as owner's change. That's intentional.\n */\n\n/** @private */\ntype RecordRefValue = Record | string;\n\n/** @private */\nclass RecordRefType extends AnyType {\n    // It is always serialized as an id, whenever it's resolved or not. \n    toJSON( value : RecordRefValue ){\n        return value && typeof value === 'object' ? value.id : value;\n    }\n\n    // Wne \n    clone( value : RecordRefValue ){\n        return value && typeof value === 'object' ? value.id : value;\n    }\n\n    // Model refs by id are equal when their ids are equal.\n    isChanged( a : RecordRefValue, b : RecordRefValue){\n        var aId = a && ( (<Record>a).id == null ? a : (<Record>a).id ),\n            bId = b && ( (<Record>b).id == null ? b : (<Record>b).id );\n\n        return aId !== bId;\n    }\n\n    // Refs are always valid.\n    validate( model, value, name ){}\n}\n\nRecord.from = function from( masterCollection : CollectionReference ) : ChainableAttributeSpec {\n    const getMasterCollection = parseReference( masterCollection );\n\n    const typeSpec = new ChainableAttributeSpec({\n        value : null,\n        _metatype : RecordRefType\n    });\n    \n    return typeSpec\n        .get( function( objOrId : RecordRefValue, name : string ) : Record {\n            if( typeof objOrId === 'object' ) return objOrId;\n\n            // So, we're dealing with an id reference. Resolve it.\n            const collection = getMasterCollection( this );\n            let   record : Record = null;\n\n            // If master collection exists and is not empty...\n            if( collection && collection.length ){\n                // Silently update attribute with record from this collection.\n                record = collection.get( objOrId ) || null;\n                this.attributes[ name ] = record;\n\n                // Subscribe for events manually. delegateEvents won't be invoked.\n                record && this._attributes[ name ].handleChange( record, null, this, {} );\n            }\n\n            return record;\n        });\n};","import { Collection } from '../collection';\nimport { define, tools } from '../object-plus';\nimport { AggregatedType, ChainableAttributeSpec, Record } from '../record';\nimport { ItemsBehavior, transactionApi } from '../transactions';\nimport { CollectionReference, parseReference } from './commons';\n\ntype RecordsIds = ( string | number )[];\n\nCollection.subsetOf = function subsetOf( masterCollection : CollectionReference ) : ChainableAttributeSpec {\n    const SubsetOf = this._SubsetOf || ( this._SubsetOf = defineSubsetCollection( this ) ),\n        getMasterCollection = parseReference( masterCollection ),\n        typeSpec = new ChainableAttributeSpec({\n            type : SubsetOf\n        });\n\n    return typeSpec.get(\n        function( refs ){\n            !refs || refs.resolvedWith || refs.resolve( getMasterCollection( this ) );\n            return refs;\n        }\n    );\n};\n\nconst subsetOfBehavior = ItemsBehavior.share | ItemsBehavior.persistent;\n\nfunction defineSubsetCollection( CollectionConstructor : typeof Collection ) {\n    @define class SubsetOfCollection extends CollectionConstructor {\n        refs : any[];\n        resolvedWith : Collection = null;\n\n        _metatype : AggregatedType\n\n        get __inner_state__(){ return this.refs || this.models; }\n\n        constructor( recordsOrIds?, options? ){\n            super( [], options, subsetOfBehavior );\n            this.refs = toArray( recordsOrIds );\n        }\n\n        // Remove should work fine as it already accepts ids. Add won't...\n        add( a_elements, options = {} ){\n            const { resolvedWith } = this,\n                    toAdd = toArray( a_elements );\n            \n            if( resolvedWith ){\n                // If the collection is resolved already, everything is simple.\n                return super.add( resolveRefs( resolvedWith, toAdd ), options );\n            }\n            else{\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                if( toAdd.length ){\n                    const isRoot = transactionApi.begin( this );\n\n                    // Save elements to resolve in future...\n                    this.refs = this.refs ? this.refs.concat( toAdd ) : toAdd.slice();\n\n                    transactionApi.markAsDirty( this, options );\n\n                    // And throw the 'changes' event.\n                    isRoot && transactionApi.commit( this );\n                }\n            }\n        }\n\n        reset( a_elements?, options = {} ){\n            const { resolvedWith } = this,\n                elements = toArray( a_elements );\n    \n            return resolvedWith ?\n                // Collection is resolved, so parse ids and forward the call to set.\n                super.reset( resolveRefs( resolvedWith, elements ), options ) :\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                delaySet( this, elements, options ) as any || [];\n        }\n\n        _createTransaction( a_elements, options? ){\n            const { resolvedWith } = this,\n                elements = toArray( a_elements );\n    \n            return resolvedWith ?\n                // Collection is resolved, so parse ids and forward the call to set.\n                super._createTransaction( resolveRefs( resolvedWith, elements ), options ) :\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                delaySet( this, elements, options );\n        }\n\n        // Serialized as an array of model ids.\n        toJSON() : RecordsIds {\n            return this.refs ?\n                this.refs.map( objOrId => objOrId.id || objOrId ) :\n                this.models.map( model => model.id );\n        }\n\n        // Subset is always valid.\n        _validateNested(){ return 0; }\n\n        get length() : number {\n            return this.models.length || ( this.refs ? this.refs.length : 0 );\n        }\n\n        // Must be shallow copied on clone.\n        clone( owner? ){\n            var Ctor = (<any>this).constructor,\n                copy = new Ctor( [], {\n                    model : this.model,\n                    comparator : this.comparator\n                });\n\n            if( this.resolvedWith ){\n                // TODO: bug here. \n                copy.resolvedWith = this.resolvedWith;\n                copy.refs = null;\n                copy.reset( this.models, { silent : true } );\n            }\n            else{\n                copy.refs = this.refs.slice();\n            }\n\n            return copy;\n        }\n\n        // Clean up the custom parse method possibly defined in the base class.\n        parse( raw : any ) : Record[] {\n            return raw;\n        }\n\n        resolve( collection : Collection ) : this {\n            if( collection && collection.length ){\n                this.resolvedWith = collection;\n\n                if( this.refs ){\n                    this.reset( this.refs, { silent : true } );\n                    this.refs = null;\n                }\n            }\n\n            return this;\n        }\n\n        getModelIds() : RecordsIds { return this.toJSON(); }\n\n        toggle( modelOrId : any, val : boolean ) : boolean {\n            return super.toggle( this.resolvedWith.get( modelOrId ), val );\n        }\n\n        addAll() : Record[] {\n            if( this.resolvedWith ){\n                this.set( this.resolvedWith.models );\n                return this.models;\n            }\n\n            throw new Error( \"Cannot add elemens because the subset collection is not resolved yet.\" );\n        }\n\n        toggleAll() : Record[] {\n            return this.length ? this.reset() : this.addAll();\n        }\n    }\n\n    // Clean up all custom item events to prevent memory leaks.\n    SubsetOfCollection.prototype._itemEvents = void 0;\n\n    return SubsetOfCollection;\n}\n\nfunction resolveRefs( master, elements ){\n    const records = [];\n    \n    for( let el of elements ){\n        const record = master.get( el );\n        if( record ) records.push( record );\n    }\n\n    return records;\n}\n\nfunction delaySet( collection, elements, options ) : void {\n    if( tools.notEqual( collection.refs, elements ) ){\n        const isRoot = transactionApi.begin( collection );\n\n        // Save elements to resolve in future...\n        collection.refs = elements.slice();\n\n        transactionApi.markAsDirty( collection, options );\n        \n        // And throw the 'changes' event.\n        isRoot && transactionApi.commit( collection );\n    }\n}\n\nfunction toArray( elements ){\n    return elements ? ( \n        Array.isArray( elements ) ? elements : [ elements ]\n    ) : [];\n}","import { Record } from '../record';\nimport { Transactional } from '../transactions';\n\nlet _store : Store = null;\n\nexport class Store extends Record {\n    getStore() : Store { return this; }\n \n    // delegate item lookup to owner, and to the global store if undefined\n    get( name : string ) : any {\n        // Lookup for resource in the current store. \n        let local = this[ name ];\n\n        // If something is found or it's the global store, return result.\n        if( local || this === this._defaultStore ) return local;\n\n        // Forward failed lookup to owner or global store.\n        return this._owner ? this._owner.get( name ) : this._defaultStore.get( name ); \n    }\n\n    static get global(){ return _store; }\n    static set global( store : Store ){\n        if( _store ){\n          _store.dispose();\n        }\n\n        Transactional.prototype._defaultStore = _store = store;\n    }\n}\n\nStore.global = new Store();","// Dummy polyfill to prevent exception in IE.\nif( typeof Symbol === 'undefined' ){\n    Object.defineProperty( window, 'Symbol', { value : { iterator : 'Symbol.iterator' }, configurable : true  });\n}\n\nimport { define, Events, Mixable as Class } from './object-plus/';\n// Define synonims for NestedTypes backward compatibility.\nimport { ChainableAttributeSpec, Record as Model } from './record';\n\n/**\n * Export everything \n */\nexport * from './collection';\nexport * from './io-tools';\nexport * from './object-plus';\nexport * from './record';\nexport * from './relations';\nexport * from './transactions';\nexport { Model, Class };\n\n\nexport const { on, off, trigger, once, listenTo, stopListening, listenToOnce } = <any>Events;\n\n\n\nexport function attributes( attrDefs ) : typeof Model {\n    @define class DefaultRecord extends Model {\n        static attributes = attrDefs;\n    }\n\n    return DefaultRecord;\n}\n\n\n/** Typeless attribute declaration with default value. */ \nexport function value( x : any ) : ChainableAttributeSpec {\n    return new ChainableAttributeSpec({ value : x });\n}\n\n/** Wrap model or collection method in transaction. */\nexport function transaction< F extends Function >( method : F ) : F {\n    return <any>function( ...args ){\n        let result;\n        \n        this.transaction( () => {\n            result = method.apply( this, args );\n        });\n        \n        return result;\n    }\n}"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","defaults","dest","source","name","other","isValidJSON","value","proto","getPrototypeOf","every","getBaseClass","Class","isEmpty","obj","some","fun","ArrayProto","arr","result","someArray","someObject","predicate","x","omit","discard","transform","once","func","memo","first","DateProto","Date","ObjectProto","notEqual","a","protoA","arraysNotEqual","keysA","keys","objectsNotEqual","HashProto","hashMap","hash","definition","_i","names","names_1","_a","name_1","prop","o","map","EventMap","handlers","slice","addEventsMap","concat","addEvent","split","eventSplitter","getBubblingHandler","callback","name_2","push","EventDescriptor","event_1","on","event_2","off","handler","_bubblingHandlers","event","trigger5","trigger3","trigger2","context","next","listOff","_events","filteredHead","prev","head","ev","_callback","listSend3","EventHandler","once_1","_once","name_3","strings","api","events","test","self","queue","all","listSend2","listSend4","listSend5","f","listSend6","Mixable","protoProps","staticProps","BaseClass","mixins","defineMixin","merge","mergeObject","getStaticDefinitions","onDefine","definitions","mergeInheritedMembers","spec","statics","TheSubclass","tslib_1.__extends","predefine","define","Constructor","__super__","MixinsState","get","populate","onExtend","ClassOrDefinition","Ctor","rules","definitionRules","definitionDecorator","definitionKey","mergeRules","appliedMixins","rule","mixins_1","mixin","isArray","sourceMixins","ctors","ctors_1","unshift","object","ignore","dontMix","getOwnPropertyNames","forEachOwnProp","sourceProp","_this","assignProperty","mixinRules","protoValue","baseProto","resolveRule","function","caller","list","destProp","configurable","pipe","classFirst","classLast","_idCount","uniqueId","cid","initialize","Messenger","localEvents","_localEvents","properties","eventsMap","defineProperties","toPropertyDescriptor","addReference","a_source","_listeningTo","removeAll","second","_disposed","stopListening","Events","listener","isProduction","process","env","NODE_ENV","logEvents","Logger","level","filter","topic","msg","props","args","toString","console","Error","counter","window","something","body","join","JSON","stringify","logger","logEvents_1","logToConsole","log","trigger","bind","startIO","promise","options","thenDo","abortIO","ioUpdate","_ioPromise","then","resp","triggerAndBubble","catch","err","abort","eventSource","collection","referenceMask","reference","splitTail","path","match","substr","tail","pop","local","resolve","Function","shift","resolveReference","root","action","skip","getStore","getOwner","ItemsBehavior","_validateNested","nested","error","validate","ValidationError","iteratee","each","eachError","cidPrefix","Transactional","endpoint","_endpoint","Transactional_1","_owner","_ownerKey","_changeEventName","listenTo","isRoot","transactionApi","begin","update","set","commit","transaction","__inner_state__","_changeToken","data","_defaultStore","getOwnerEndpoint","_endpoints","_validationError","validationError","getValidationError","_transaction","markAsDirty","dirty","silent","_isDirty","initiator","originalOptions","_onChildrenChange","aquire","owner","child","free","_begin","_markAsDirty","setAttribute","record","_attributes","doUpdate","attributes","_previousAttributes","AttributesCopy","_changedAttributes","UpdateRecordMixin","attribute","propagateChanges","forceAttributeChange","_createTransaction","a_values","unknown","changes","values","parse","shouldBeAnObject","unknownAttrsWarning","RecordTransaction","nested_1","_log","nested_2","changes_1","_b","emptyOptions","a_options","getHooks","transforms","changeHandlers","type","toJSON","changeEvents","hasCustomDefault","defaultValue","tools.isValidJSON","isRequired","convert","getHook_1","getHook","reduce","chainGetHooks","validate_1","chainTransforms","handleChange","chainChangeHandlers","doInit","AnyType","model","v","isChanged","code","text","getClassName","New value","Prev. value","prevHook","nextHook","prevTransform","nextTransform","prevHandler","nextHandler","ImmutableClassType","PrimitiveType","NumericType","num","isFinite","ArrayType","ObjectType","doNothing","FunctionType","DateType","date","timestamp","getTime","toISOString","supportsDate","isNaN","struct","minutesOffset","isoDatePattern","exec","k","numericKeys","undefined","UTC","safeParseDate","AggregatedType","clone","canBeUpdated","nestedTransaction","_shared","persistent","_handleChange","unset","dispose","shareAndListen","listen","share","SharedType","implicitObject","_onChange","builtins","String","Number","Boolean","metatypes","getMetatype","_metatype","idx","ChainableAttributeSpec","check","metadata","asProp","required","ref","emptyFunction","changed","eventMap","unsubscribe","subscribe","cloned","attrSpec","type_1","inferType","shared","createSharedTypeSpec","Attribute","createAttribute","from","createAttributesMixin","attributesDefinition","baseClassAttributes","myAttributes","_.transform","allAttributes","_.defaults","ConstructorsMixin","attrDefs","attrs","attr","Attributes","constructorsMixin","_attributesArray","createPropertyDescriptor","attrSpecs","eventsApi.EventMap","createWatcherFromRef","wrapWatcher","localEventsMixin","attrDef","watcher","IORecordMixin","save","getEndpoint","json","isNew","id","fetch","read","destroy","remove","_cidCounter","_super","typeCheck","Record","extend","diff","hasChanged","val","old","nullify","forEach","idAttribute","_attributesArray_1","copy","pinStore","errors","asJson","l","newModel","clear","a_logger","Attributes definition:","Symbol","iterator","RecordEntriesIterator","Collection","BaseRecordAttributes","BaseRecordAttributesCopy","IdAttribute","metatype","done","DefaultCollection","dynamicMixin","_aquire","_free","convertAndAquire","_aggregationError","_itemEvents","sortElements","_comparator","sort","models","addIndex","index","removeIndex","updateIndex","previous","added","removed","sorted","CollectionTransaction","logAggregationError","added_1","_d","removed_1","_e","addTransaction","items","a_items","forceMerge","_byId","prevLength","a_items_1","item","appendElements","needSort","at","length_1","j","moveElements","sortOrMoveElements","removeMany","toRemove","_removeFromIndex","_reallocate","silentOptions","emptySetTransaction","len","src","_reallocateEmpty","setTransaction","_prevById","prevModels","toAdd","orderKept","reusedCount","previous_1","_garbageCollect","children","children_1","freeAll","addedOrChanged","_count","CollectionRefsType","records","comparator","toElements","subset","subsetOf","RefsCollection","_SubsetOf","Refs","Subset","itemEvents","aa","bb","_store","objOrId","count","a_index","elements","add","reset","enabled","liveUpdates","filter_1","_liveUpdates","updated","tslib_1.__assign","aggregated","a_elements","previousModels","previousModels_1","toDispose","recordsOrIds","el","splice","notify","removeOne","modelOrId","a_next","Argument","Attributes spec","end","toPredicateFunction","find","entries","parsed","keys_1","keys_2","parseReference","collectionRef","RecordRefType","masterCollection","getMasterCollection","SubsetOf","subsetOfBehavior","refs","toArray","SubsetOfCollection","resolvedWith","resolveRefs","delaySet","raw","toggle","addAll","master","elements_1","tools.notEqual","Store","store","global","listenToOnce","DefaultRecord","Model","method","reject","onAbort","fn","Promise","a_resolve","a_reject","listName","attrName","getMetadata"],"mappings":"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"}